{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kartoza Handbook","text":"<p>This site comprises the organisational and technical documentation for Kartoza.</p> <p>This is where we highlight the procedures, principles, and processes related to Development, DevOps, and GIS, in line with the organisations best practices.</p> <p>This is open content, available on GitHub and freely licensed as public domain content under the terms of CC0 1.0 Universal.</p> <p>This content is delivered without any warranty, express or implied. Use at own risk.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>The purpose and function of this collection of documents is to perform the following:</p> <ul> <li>Improve consistency in processes and products</li> <li>Improve efficiency and innovation</li> <li>Increase transparency and accountability</li> <li>Improve value for clients</li> <li>Provide a space for the dissemination and proliferation of ideas</li> <li>Promote a culture of openness and collaboration</li> <li>Provide a single source of truth for resources</li> <li>Promote personal growth and development</li> <li>Add value to the community</li> </ul>"},{"location":"#scope","title":"Scope","text":"<p>Kartoza is a company that specializes in Open Source Geospatial solutions. As a result, topics covered by this documentation will be limited to categories relevant to the operations of Kartoza. These categories are outlined as follows:</p> <ul> <li>Company: General practices and procedures for Kartoza staff</li> <li>GIS: Resources for Geographic Information Systems and data</li> <li>Development: Software development processes, tools, and conventions</li> <li>DevOps: Developer operations and system administration</li> <li>Resources: Cheatsheets, links, media, and other resources</li> </ul> <p>This repository is limited to these categories, with some slight overlap in domain verticals.</p> <p>In the majority of instances, where overlaps with adjacent fields of interest, such as Data Science, \"Big Data\", or to some extent even earth observation and remote sensing, these elements should be primarily remanded to external references in the resources section.</p> <p>Whilst some resources (such as tutorials on Semi-Automated Classification with QGIS) may be considered valuable additions, the priority of this content is to remain a concise collection of resources directly related to the operations and key competencies of Kartoza staff.</p>"},{"location":"#limitations","title":"Limitations","text":"<p>This collection of documents does not constitute a replacement for Standard Operating Procedures (SOPs) and company policy. In some cases, our SOPs may point to sections of this handbook, but the SOP itself is canonical as to where the procude content lies. Due to the rate at which modern technology develops, opinions change, project needs or priorities are adjusted, and the operational requirements of the organisation evolve, this collection is somewhat ephemeral and should be considered a dynamic \"living document\" which is subject to constant change and iteration.</p> <p>Processes and documentation from this collection are developed in conjunction with the broader community, independant contractors, temporary staff, juniors, and interns. As such they are not guaranteed to reflect the views of Kartoza, and are not intended to be a substitute for official policy.</p> <p>As resources and processes mature, they may be incorporated into official SOPs as required.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Although Kartoza is a privately held Open Source development and consulting company, the organisation deeply values transparency, delivery of value to the broader community, and continuous engagement with all stakeholders.</p> <p>Community contributions to this documentation site and associated resources are welcome. Contributions are expected to adhere to the QGIS.org Diversity Statement and Code of Conduct.</p> <p>If you have any queries or feedback, please contact us at info@kartoza.com</p>"},{"location":"contributing/#conventions","title":"Conventions","text":"<p>The following conventions outline expectations for contributions to this documentation project:</p> <ul> <li>Use grammar checking tools where available, such as grammarly or spell checking extensions for your IDE</li> <li>Request a review for internal changes before they are merged into the main repository</li> <li>Default to British English spellings rather than American English</li> <li>Do not commit sensitive information or links to non-public resources. This includes internal unlisted youtube channels, cloud storage repositories such as nextcloud, or personal details</li> <li>Due to the nature of the contents in this repository, when making large edits that do not create new content, communicate with team members to prevent collisions</li> <li>When producing assets such as images, ensure they are the minimum viable size and do not commit large resources to git</li> <li>Assets and media elements such as images are best left out of the source control where possible. Use an external storage system (e.g. minio/ s3), or paste an image into an image to get a GitHub reference to the media item rather than committing to git. This includes screenshots etc. that are likely to change or be updated over time. Use the assets directory to store assets that are not likely to change such as logos</li> <li>When using assets, upload them to a suitable file path according to their primary usage location, e.g. <code>assets/images/resources/cheatsheets/postgresql/joins.png</code></li> <li>Due to the depth and breadth of these resources, it is necessary to manually index new pages in various subcategories to ensure access and discoverability</li> <li>It makes sense to use a consistent legend of emoji for tagging project and documentation items. Although it may have a steep initial learning curve or implementation strategy, using emoji and unicode symbols to tag elements is a fun and intuitive way to attach metadata to elements which makes visually scanning over documents and commit histories much more effective in multiple languages. Please see the polyglot document for more information.</li> <li>Build and check your changes locally to catch any errors before committing them to the main repository</li> <li>TODO: come up with some formatting guideline (e.g. max line length etc)</li> </ul>"},{"location":"contributing/#tags-badges-and-shields","title":"Tags, Badges, and Shields","text":"<p>Tagging elements with emoji is useful for visual identification and search of various elements in broader categories, but sometimes more explicit metadata is required to be attached to something to indicate whether it constitutes a general resource, opinion, community standard, or whether something is a known reference item connected to an official SOP. One method of identifying such features may be using shields.io, for example:</p> <ul> <li> <code>![Best Practice](https://img.shields.io/badge/kartoza-best--practice-blue)</code></li> <li> <code>![Community](https://img.shields.io/badge/community-standard-brightgreen)</code></li> <li> <code>![Industry](https://img.shields.io/badge/industry-standard-yellowgreen)</code></li> </ul>"},{"location":"contributing/#translations","title":"Translations","text":"<p>Due to the scope and intension for frequent updates to this documentation, additional languages will not be supported at this time.</p> <p>Translations and i18n are handled by the documentation framework, as outlined in the mkdocs and mkdocs-material documentation.</p>"},{"location":"contributing/#framework","title":"Framework","text":"<p>This documentation uses the mkdocs-material framework, and site configuration is specified in the mkdocs.yaml file. Various extensions are supported to improve usability, such as pymdown, which may be enabled via pull requests. Please note that only extensions which provide relevant value will be considered for integration, and extensions with significant learning curves or duplication should be avoided. Extensions which provide accessibility improvements are welcome.</p>"},{"location":"contributing/#building","title":"Building","text":"<p>The online documentation is built using github actions and published to the gh-pages branch.</p> <p>To build the documentation locally, use the docker command <code>docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build</code> to populate the site directory with the static content. To serve the data for testing, a simple solution is to use a python webserver to serve the data at <code>127.0.0.1:9101</code> using the command <code>cd site &amp;&amp; python -m http.server --bind 127.0.0.1 9101</code>.</p> <p>Note that the generated site data and assets are explicitly excluded from git.</p>"},{"location":"polyglot/","title":"Polyglot: The Emoji Map","text":"<p>Although it may have a steep initial learning curve or implementation strategy, using emoji and unicode symbols to tag elements is a fun and intuitive way to attach metadata to elements which makes visually scanning over documents and commit histories much more effective in multiple languages.</p> <p>In order for this to be effective, a consistent method of referencing the emoji meanings is required. This is challenging because the utilisation of emoji are typically context specific, which requires a mapping of emoji meanings for various contexts.</p> <p>Kartoza values inclusion and diversity. Please contribute to ensure that the items represented here remain inclusive and fair wherever possible.</p>"},{"location":"polyglot/#gitmoji","title":"gitmoji","text":"<p>Tagging commit messages in git is a useful tool for visually assessing the issues addressed by a particular commit.</p> <p>A community standard has already been developed, available at https://gitmoji.dev/</p>"},{"location":"polyglot/#kitmoji-gitmoji-","title":"kitmoji (gitmoji-)","text":"<p>gitmoji is fairly comprehensive collection, and used quite widely in the tech community (relative to similar projects). The downside to this is that it is rather verbose and becomes cumbersome to learn and use.</p> <p>The simple solution is to select a subset (kit) of the gitmoji icons and use them as broader higher level categories. This keeps things a bit more consistent and allows gradual adoption of the wider collection.</p> id Icon Reference Function 1 \u2728 <code>:sparkles:</code> New features 2 \ud83d\udc1b <code>:bug:</code> Bugfix 3 \u267b\ufe0f <code>:recycle:</code> Refactoring/ Comments 4 \ud83d\udcdd <code>:memo:</code> Documentation 5 \ud83d\udc84 <code>:lipstick:</code> UI 6 \u26a1\ufe0f <code>:zap:</code> Performance 7 \ud83d\ude80 <code>:rocket:</code> CI/ CD/ Deployment 8 \u2705 <code>:white_check_mark:</code> Testing 9 \ud83d\udd12\ufe0f <code>:lock:</code> Security 10 \ud83d\udd25 <code>:fire:</code> Remove data 11 \u23ea\ufe0f <code>:rewind:</code> Revert changes 12 \u2697\ufe0f / \ud83d\udca9 <code>:alembic:</code> / <code>:poop:</code> Experiments/ PoC/ bad code <p>Not every commit has to have a gitmoji, but it's useful for common cases.</p>"},{"location":"polyglot/#geomoji","title":"GeoMoji","text":"<p>As with gitmoji, we need a consistent way to reference Geographic Information Elements. This could be related to data sources, licenses, tools, or standard metadata categories. Some may confuse the concept of geomoji with generic symbology and signage, but in this instance the reference is to a series of common Emoji characters which can be used as concise, visually effective hashtags that can be used across across applications, search tools, git messages, documentation, or social media. It would be great to extend this concept to a collection of map symbols (e.g. using emoji instead of a font library).</p> <p>A alpha-state concept project is in development at https://github.com/zacharlie/geomoji.</p>"},{"location":"company/kartoza/","title":"About Kartoza","text":"<p>In this section we describe the company, our ethos and general expectations of our team members and their use of technology and systems within the company.</p> <p>All staff members are expected to read and comply with (where applicable) the content laid out in this handbook.</p> <p>Kartoza is a South Africa-based Free and Open Source GIS (FOSSGIS) service provider. We use GIS software to solve complex location-related problems for individuals, businesses and governments around the world.</p> <p>Kartoza was formed as a merger between Linfiniti and Afrispatial.</p> <p></p> <p>Learn more at our company website https://kartoza.com</p> <ul> <li>Strategic Objective</li> </ul> <p>Working at Kartoza:</p> <ul> <li>Your Kartoza Computer</li> <li>Essential Software</li> <li>Daily Workflow</li> <li>Communication</li> </ul>"},{"location":"company/kartoza/communication/","title":"Communication","text":"<p>In Kartoza, communcation is probably the most important skill that we want to engender in our staff. Whether it is communicating your work in standups and issues, talking with clients, checking in with project leads, writing emails and reports, communication is probably the most important skill needed for your work.</p> <p>Good communication keeps the company running smoothly, keeps happiness levels high, instills a sense of professionalism in customers and the outside world that interact with us, and prevents wasting time and effort.</p> <p>As a purely virtual company, communication skills are particularly important because we do not work together in a physical space and we need to make extra effort to ensure that we communicate well.</p>"},{"location":"company/kartoza/communication/#communication-systems","title":"Communication Systems","text":""},{"location":"company/kartoza/communication/#slack","title":"Slack","text":"<p>Slack is our primary communication mechanism. You should have slack running and available at all times during your work day. If you run mission critical systems (e.g. maintaining client web sites, server infrastructure), you should have slack on your phone so that we can contact you after hours in emergencies.</p> <p>In some cases our clients have slack channels, which you should participate and monitor as needed to carry out your client related tasks.</p> <p>All staff members are at minumum members of the '1-kartoza'  and '4-random' channels. You should use 1-kartoza for all your general communications.</p> <p>You might be tempted to use DMs (Direct Messages) to ask team mates for technical information, plan work etc. Please don't do this! Use the 1-kartoza channel for all communications unless it is something of a personal nature that you need to discuss with management.</p> <p>Why do we ask you not to use DMs? Because when you communicate in the 1-kartoza channel that is public to the company, we realise a number of benefits:</p> <ol> <li>We can see what things you are working on.</li> <li>We can see you are actively working (which is often difficult in a virtual company).</li> <li>If you are experience a technical issue, the whole company can be aware of it and potentially help you, rather than you being stuck waiting for a single person to help you.</li> <li>If you are stuck on something, project leads and management can be aware of which projects are having issues and plan accordingly.</li> <li>It creates a sense of 'togetherness' that is otherwise lost in a virtual company.</li> </ol> <p>For internal company communications, we have our lowest bar in Slack in terms of how much attention you need to pay to grammar and crafting beautiful prose.</p>"},{"location":"company/kartoza/communication/#email","title":"Email","text":"<p>All Kartoza employees are issued with an email address ending in @kartoza.com. When you set up your email account, make sure to include our corporate branding in your signature as per the image below.</p> <p></p> <p>Here is the signature in text form:</p> <p>\u200b </p> <p>Tim Sutton Kartoza Co-Founder</p> <p>Visit http://kartoza.com to find out about open source:</p> <ul> <li>Desktop GIS programming services</li> <li>Geospatial web development</li> <li>GIS Training</li> <li>Consulting Services</li> </ul> <p>Tim is a member of the QGIS Project Steering Committee</p> <p>Replace the line under your name with your job description e.g. Senior Developer.</p> <p>When writing emails there are a few things we want you to ensure which we list below:</p> <ul> <li>Correctness: Check the details in your email are factually correct.</li> <li>Completeness: Make sure you address all the questions raised if it is a reply to a colleague or client.</li> <li>Professionalism: Make sure that you have spell-checked your email (use grammarly or similar if needed and especially if you are not a native english speaker).</li> <li>Responsiveness: Reply to emails within a working day, even if the reply is just to confirm receipt and inform the other person when they will get a complete reply.</li> <li>Politeness: Emails should be written in a polite way - never be rude to the person you are communicating with even if they are being rude to you. Politeness includes taking the trouble to spell names correctly, thank the person for their email and greet them at the start and end of your mail.</li> </ul>"},{"location":"company/kartoza/communication/#meet--video-call","title":"Meet / Video Call","text":"<p>Often you will need to meet with clients on Google Meet or similar video conferencing call.</p> <p>When attending a video / voice call, follow these guidelines:</p> <ul> <li>Be on time: Join the call a few minutes before it starts so that you are 'ready to go' when the call kicks off.</li> <li>Check your environment: Most of us work from home and that means sometimes we might have pets or family or other things going on. Try to sit in a place where you can work without distracting the call participants of these thngs. Make sure the room (or at least the part of the room visible in the camera frame) is tidy and neat.</li> <li>Sound: It is critical you can be heard during the call. Ensure you have a good microphone and camera and that your environment is noise free - it will be a distraction for the other call participants.</li> <li>Bandwidth: As a virtual / remote worker, you are responsible for ensuring that you have a reliable internet connection that is fast enough to handle voice calls with video / screenshares. This is a condition of your employment and if you do not have an adequate connection, we may not be able to keep you under our employment.</li> <li>Power: If you live in a power challenged society (e.g. South Africa), you are expected to ensure you have alternatives in place to ensure you have power during meetings - charged laptop batteries, battery packs for your internet connection etc.</li> <li>Avoid being overly familiar: Be friendly and open but keep in mind we are typically billing clients for our time during a call, or they are assessing the possibility of contracting us or collaborating with us. For this reason keep the focus of the call on work.</li> </ul>"},{"location":"company/kartoza/communication/#escalation","title":"Escalation","text":"<p>When you are communicating with colleagues, especially if it is something urgent you should follow this escalation procedure if you do not get the response you need:</p> <ul> <li>Ask them in the original medium (email / slack / video call)</li> <li>Follow up with a second medium (e.g. a nudge in slack to check email) if you do not get a timely response</li> <li>Send a calendar invitation for a short meeting if you get no response.</li> <li>Send the person a whatsapp / telegram etc.</li> <li>Phone the person (mobile/whatsapp/telegram etc.)</li> <li>Ask their line manager or a colleague to reach out to them</li> </ul> <p>Continue escalating the frequency and form of communication until you get a response.</p>"},{"location":"company/kartoza/communication/#responding-to-client-emails","title":"Responding to Client Emails","text":"<p>If a client or potential client writes to you, our expectation is that you should respond to them by next business day. If you reply, please CC in the original recipients  so they know the email has been dealt with. We ask you all to focus on your communication skills as it is a recurring issue that we have in the company and really creates a bad experience for our clients. </p> <p>It is quite ok to give just a short reply giving a timeline of when a detailed reply will be forthcoming. If answering an email enquiry requires a substantial amount of time, you can also chat with the client (or ask your project or general manager to do so) and raise a quotation for the work involved in the client request.</p>"},{"location":"company/kartoza/daily_workflow/","title":"Your daily workflow at Kartoza","text":""},{"location":"company/kartoza/daily_workflow/#starting-your-day","title":"Starting your day","text":"<p>The activities for your day are determined by:</p> <ol> <li>Which project you are working on, as listed in the company-wide project gantt chart / sheet. Normally we try to have you work on a single project per day to reduce cognative friction as you context switch from one project to another.</li> <li>The scrum board / project board for that day's project. The list of sized tickets should be implemented sequentially, from the top of the 'this sprint' column, down to the bottom.</li> </ol>"},{"location":"company/kartoza/daily_workflow/#story-points","title":"Story points","text":"<p>Your issues closed in GH should equate to a day or more (assuming some tasks will be quicker than estimated) of GH issues sizes. Before working on any issue it should be sized. Any issue deemed to be larger than 1 day of work should be split into smaller issues.</p>"},{"location":"company/kartoza/daily_workflow/#standups","title":"Standups","text":"<p>Your daily stand ups should be written like this:</p>"},{"location":"company/kartoza/daily_workflow/#yesterday","title":"Yesterday","text":"<p>Project: Flux Capacitor Enlargement</p> <ul> <li>[Size 4] Closed https://github.com/fcap/foobar/issues/123 - Add transparency to map</li> <li>[Size 4] Closed https://github.com/fcap/foobar/issues/124 - Add transparency to legend</li> <li>[Size 2] WIP https://github.com/fcap/foobar/issues/125 - Add transparency to widgets</li> </ul> <p>Project: Kartoza</p> <ul> <li>[Size 1] Water cooler - outed @Rudolf as a serial imposter</li> </ul>"},{"location":"company/kartoza/daily_workflow/#today","title":"Today","text":"<p>Project: Flux Capacitor Enlargement</p> <ul> <li>[Size 8] https://github.com/fcap/foobar/issues/128 - Render flux capacitor on map</li> </ul>"},{"location":"company/kartoza/daily_workflow/#blockers","title":"Blockers","text":"<ul> <li>Waiting for client to respond with clarification request on https://github.com/fcap/foobar/issues/130</li> </ul> <p>Here is an example from our Slack of a beautifully presented standup up - yours should look like this too!</p> <p></p>"},{"location":"company/kartoza/daily_workflow/#running-your-timesheets","title":"Running your timesheets","text":"<p>We run our own timesheet application (thanks Dimas!) at timesheets.kartoza.com - and in our ERP Next platform. The timesheets.kartoza.com is preferred since it has many niceties to make your time tracking more efficient. We bill our customers in 15 minute increments, rounded down or up as appropriate. This is aggregated across the day. That means if you e.g. log 2h12 minutes on one cost center for a client and 1h00 minutes on another cost center for the same client, the client will be billed 3h15min for the day's work.</p> <p>The descriptions in your timesheets should be defensible, terse descriptions of work with links to GitHub issues. Defensible means that if a client were ever to ask you to justify how you spent your time in an invoiced line item, we can refer back to the description and see references to tickets worked on and the story points associated with the work.</p> <p>Your timesheets should match the projects planned on the planner sheet.</p>"},{"location":"company/kartoza/daily_workflow/#setting-up-the-timesheet-account","title":"Setting up the timesheet account","text":"<p>Step 1: Go to https://timesheets.kartoza.com</p> <p>Step 2: Choose register to create your account:</p> <p></p> <p>Step 3: Complete the form to create your account:</p> <p></p> <p>Step 4: Use the cog menu to get to the settings panel</p> <p></p> <p>Go to ERP Next to get your API keys by looking in your user profile e.g.</p> <p>https://kartoza.erpnext.com/app/user/YOURUSERNAME%40kartoza.com</p> <p></p> <p>Back on the timesheets app, in the form that appeared from the cog menu, enter your API key and secret:</p> <p></p> <p>Now use the button (1) to pull data from erpnext then the button (2) to return to your timesheet.</p> <p></p>"},{"location":"company/kartoza/deleteme/","title":"How I made my map","text":""},{"location":"company/kartoza/deleteme/#getting-boundaries","title":"Getting boundaries","text":"<p>https://data.humdata.org/dataset/cod-ab-zaf?</p> <p>I chose this rather than the official SA boundaries because it is recommended</p> <p>Download the shp zip https://data.humdata.org/dataset/061d4492-56e8-458c-a3fb-e7950991adf0/resource/f5b08257-8d03-48dc-92c8-aaa4fb7285f0/download/zaf_adm_sadb_ocha_20201109_shp.zip</p> <p></p>"},{"location":"company/kartoza/essential_software/","title":"Essential Software","text":"<p>In this section we will enumerate all of the software packages you should have installed on your computer. There are some items that can be considered optional, but you should be aware of all of these tools and install them when and as the need arises.</p>"},{"location":"company/kartoza/essential_software/#qgis","title":"QGIS","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#postgresql","title":"Postgresql","text":"<p>URL: www.postgresql.org Purpose: Relational database management system with GIS support. Notes:</p>"},{"location":"company/kartoza/essential_software/#libreoffice","title":"LibreOffice","text":"<p>URL: libreoffice.org/ Purpose: Office productivity suite. Notes:</p>"},{"location":"company/kartoza/essential_software/#git--github-account","title":"Git &amp; GitHub Account","text":"<p>URL: github.org Purpose: Version control of digital assets Notes: Although GitHub is not Git, you need to be set up to work on github.</p>"},{"location":"company/kartoza/essential_software/#_1","title":"Essential Software","text":"<p>URL: https://flameshot.org/ Purpose: Taking annotated screenshots efficiently Notes: I map Ctrl-4 to the tool in gnome like this:</p> <p></p>"},{"location":"company/kartoza/essential_software/#_2","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_3","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_4","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_5","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_6","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_7","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_8","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_9","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_10","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_11","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_12","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_13","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_14","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_15","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_16","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/essential_software/#_17","title":"Essential Software","text":"<p>URL:  Purpose: Notes:</p>"},{"location":"company/kartoza/operating_principles/","title":"Kartoza's Thirty Principles","text":"<ol> <li>We are innovative. This means we are not set in our ways. We have a diverse toolset and skills and while we retain combinations that work well, we readily change and adapt these and discard those that don't work.</li> <li>Company decisions conform to the Strategic Objective, these Thirty Principles and Working Procedures documents.</li> <li>We are a lean and agile company and follow SAFe principles.</li> <li>We promote open and easy access to information.</li> <li>We provide opportunities for community involvement.</li> <li>We provide opportunities for education and training in FOSS tools and GISc.</li> <li>Our internal systems and client-facing solutions are scalable, resilient and reliable.</li> <li>We are the highest-quality spatial IT company in South Africa and equal to the best globally. We do whatever it takes to ensure the quality of service to our clients, employees and suppliers is impeccable.</li> <li>We draw solid lines, thus providing an exact status of where things stand. Documented procedures are the main defence against grey-area problems.</li> <li>\"Get the job done.\" Can the employee do his or her job, or is there always a complication of one kind or another? This ability to \"get the job done quickly and accurately without excuses or complications\" is the most valuable trait an employee can possess.</li> <li>Employees come first. We employ people who have an innate desire to perform at a hundred percent. We reward them accordingly. The natural outcome is that we serve our clients well.</li> <li>We are not fire killers. We are fire prevention specialists. We don't manage problems; we work on system enhancement and system maintenance to prevent problems from happening in the first place.</li> <li>Problems are gifts that inspire us to action. A problem prompts the act of creating or improving a system or procedure. We don't want setbacks, but when one occurs we think, \"thank you for this wake-up call,\" and take assertive system-improvement action to prevent the setback from happening again.</li> <li>We focus on just [[a few manageable markets|Kartoza Portfolio Offerings]]. Although we watch for new opportunities, in the end we provide \"just a few products and services implemented in superb fashion,\" rather than a complex array of average-quality offerings.</li> <li>We find the simplest solution. Ockham's Law, also called the Law of Economy, states, \"Entities are not to be multiplied beyond necessity . . . the simplest solution is invariably the correct solution.\"</li> <li>The money we save or waste is not Monopoly money! We are careful not to devalue the worth of a Rand (or Dollar or Rupiah or Euro) just because it has to do with the business.</li> <li>We operate the company via documented procedures and systems. \"Any recurring problem can be solved with a system.\" We take the necessary time to create and implement systems and procedures and in the end, it is well worth it. If there is a recurring problem, a written procedure is created to prevent the problem from happening again. On the other hand, we don't bog down the organisation with processes and procedures that target once-in-a-while situations. Sometimes we elect to not create a procedure.</li> <li>\"Just don't do it.\" Eliminate the unnecessary. Many times, elimination of a system, protocol, or potential project is a very good thing. Think simplicity. Automate. Refine to the smallest number of steps or discard altogether. Would a simple \"no\" save time, energy or money?</li> <li>Our documented systems, procedures, and functions are \"off-the-street.\" This means anyone with appropriate training can perform procedures unassisted. The real-world evidence of this is we can hire an individual \"off-the-street\" who has good GIS or programming skills and have him or her doing QGIS or development work within a week. For this result, protocols have to be efficient, simple, and thoroughly documented.</li> <li>Do it NOW. All actions build on \"point-of-sale\" theory. We don't delay an action if it can be done immediately. Just like any major retail outlet, we \"update inventories and databases at the exact time the transaction takes place.\" There is no paperwork floating around the office after a physical transaction. We ask, \"How can we perform the task NOW without creating lingering details that we must clean up later?\"</li> <li>We glean the Kartoza mindset from Stephen Covey's books, including The 7 Habits of Highly Successful People, First Things First, and The 8th Habit. As well, we consider Good to Great by Jim Collins; The E-Myth Revisited by Michael Gerber; Awaken the Giant Within by Anthony Robbins; Maverick by Ricardo Semler; Work the System by Sam Carpenter.</li> <li>We pattern individual organisation upon Franklin-Covey theory. We use organising mechanisms that are always at hand. We prioritise, schedule, and document. The system is always up-to-date and we use it all the time. For Kartoza, these are Github, Google Suite (Mail, Drive, etc.), SyncThing, Sage, OpenProject and others (subject to change as of August 2020)</li> <li>Sequence and priority are critical. We work on the most important tasks first. We spend maximum time on \"non-urgent/important\" tasks via Stephen Covey's time-matrix philosophy.</li> <li>We double-check everything before release. If a penchant for double-checking is not an innate personal habit, then it must be cultivated. Double-checking is a conscious step in every task, performed either by the individual managing the task or someone else.</li> <li>Our environment is spotless: clean and ordered, simple, efficient, functional. No \"rat's nests\", literally or figuratively.</li> <li>Employee training is structured, scheduled, and thorough. Assertive client contact is also structured, scheduled, and thorough.</li> <li>We are deadline-obsessed. If someone in the organisation says they will be finished with a task or project by a certain date and time, then he or she commits to finishing by that deadline (or, if legitimate delays intrude, advise coworkers well in advance that the deadline is impossible to meet).</li> <li>We maintain equipment and keep it a hundred percent functional at all times. If something is not working as it should, fix it now even if it's not necessary to fix it now. It's a matter of good housekeeping and of maintaining good habits. This is just the way we do things.</li> <li>Mastery of the English language is critical. We are aware of how we sound and what we write. We do whatever we can to improve. We are patient as a coworker corrects us.</li> <li>We study to increase our skills. A steady diet of reading and contemplation is vital to personal development. It is a matter of self-discipline.</li> <li>We avoid multitasking activities. When communicating with someone else, we are a hundred percent present. We give full attention to the person in front of us (or to the task at hand). We focus on listening and understanding. Read the classic 'Treating Type A Behaviour and Your Heart' by Meyer Friedman. \"Mindfulness\" is paying complete attention to one thing at a time: read 'Full Catastrophe Living' by Jon Kabat-Zinn.</li> <li>When in the office we work hard on Kartoza business. We keep our heads down; we focus, and in turn the company pays well. That's \"the deal\". The work week rarely exceeds forty hours.</li> <li>Complete means \"complete.\" Almost or tomorrow is not \"complete.\" In particular, this is germane to GitHub issues.</li> <li>We strive for a social climate that is serious and quiet yet pleasant, serene, light, and friendly. Kartoza is a nice place to work.</li> <li>As opposed to \"doing the work,\" an \"operations manager's\" job is to create, monitor, and document systems (which consist of people, equipment, procedures, and maintenance schedules).</li> <li>The Managing Director(s) oversee department heads and overall systems. It is the MD's job to direct, coordinate, and monitor the company.</li> </ol>"},{"location":"company/kartoza/setting_up_your_computer/","title":"Setting up your PC","text":""},{"location":"company/kartoza/setting_up_your_computer/#hardware","title":"Hardware","text":"<p>Here are the standard minimum guidelines for hardware for Kartoza Staff:</p> <p>Laptops are preferred in general. Many of our staff work in areas with unreliable power supply and so you need to be able to work offline for at least four hours.</p>"},{"location":"company/kartoza/setting_up_your_computer/#admin-staff","title":"Admin Staff","text":"<p>Admin staff tend to have less demanding activities which is reflected in the hardware:</p> Feature Requirements RAM 8GB Hard Disk 256GB SSD Internal Display 1920 x 1080 or better External Display 1920 x 1080 or better Operating System Ubuntu LTR CPU Mid range e.g. i5 4 core or Athlon equivalent"},{"location":"company/kartoza/setting_up_your_computer/#gis-staff","title":"GIS Staff","text":"<p>GIS Staff need laptops with good storage capacity for accommodating large GIS datasets, and good processing power to perform time-consuming analysis quickly.</p> Feature Requirements RAM 16GB Hard Disk 1TB SSD Internal Display 1920 x 1080 or better External Display 1920 x 1080 or better Operating System Ubuntu LTR CPU Mid range e.g. i5 4 core or Athlon equivalent"},{"location":"company/kartoza/setting_up_your_computer/#developer-staff--devops","title":"Developer Staff &amp; Devops","text":"<p>Developer Staff and Devops need laptops with processing power so they can run multiple containers to emulate the deployment environment for their apps. Developer staff tend to have more technical skills and may install their own preference of Operating System if they prefer.</p> Feature Requirements RAM 16GB Hard Disk 500GB SSD Internal Display 1920 x 1080 or better External Display 1920 x 1080 or better Operating System Ubuntu LTR or user preference CPU Mid range e.g. i5 4 core or Athlon equivalent"},{"location":"company/kartoza/setting_up_your_computer/#additional-hardware","title":"Additional Hardware","text":"<p>All staff should in addition be issued with:</p> <ul> <li>A USB headset. USB headsets include their own DSP (Digital Sound Processor) and will generally have a better sound quality than an analogue headset.</li> <li>An external disk for backups. This should again be encrypted. The disk should be 4x the size of the hard disk. Use D\u00e9j\u00e0 Dup Backups to run automatic backups on a nightly basis.</li> <li>A kensington lock. This should be used whenever the laptop is left unattended in a public place (i.e. anywhere other than your home).</li> <li>A Yubikey. This will be used to authenticate to Google Apps for Domains (Via Yubikey TOTP), BitWarden, your local PC login (via FIDO2) and other services such as NextCloud. Each staff member should be issued with two of these devices and the second should be stored at home in a safe place in case the first is lost. One of following models are suggested:</li> </ul> <p> </p>"},{"location":"company/kartoza/setting_up_your_computer/#base-install-requirements","title":"Base Install Requirements","text":"<p>Every staff computer should have the following as a minimum:</p> <ul> <li> <p>Encrypted disk. Under Linux use LUKS when you install to encypt at a minimum your home partition. Ideally your whole system should be encrypted since if you run docker, postgres and other similar services, you have exposure to data loss if someone steals your PC.</p> </li> <li> <p>Strong password. The password for your account should not be used for any other system.</p> </li> <li> <p>Yubikey PAM Integration. We recommend as an added precaution to set up the YubiKey PAM module which will require to touch your YubiKey after typing in your system password to autheticate. The process for doing this is described here.</p> </li> </ul> <p>Yubkey locks the FIDO2 Pin by default. You should follow  these steps to unlock it first before running through the above tutorial. Note they assume you have installed the PPA in the above tutorial above first.</p> <p>Install the YubiKey GUI manager, then use the options as shown below.</p> <pre><code>sudo apt install yubikey-manager-qt\nykman-gui\n</code></pre> <p></p>"},{"location":"company/kartoza/setting_up_your_computer/#online-accounts","title":"Online Accounts","text":"<p>You need to have online accounts with the following services:</p> <ul> <li>GitHub - then set up your YubiKey as your 2FA here. As a backup 2FA you should use the GitHub mobile app. Note that using SMS for 2FA is not considered secure.</li> </ul> <p></p> <ul> <li>Google. Set up your YubiKey as your 2FA here. As a backup 2FA you should use the Google mobile app. Note that using SMS for 2FA is not considered secure.</li> </ul> <p></p> <ul> <li>Hetzner. If you are a staff member with permission to access Hetzner, set up your YubiKey as your 2FA here. Note that using SMS for 2FA is not considered secure.</li> </ul> <p></p> <ul> <li> <p>ERNext. Our admin team will provision an account for you.</p> </li> <li> <p>NextCloud. Our admin team will provision an account for you. NextCloud. If you are a staff member with permission to access Hetzner, set up your YubiKey as your 2FA here. Note that using SMS for 2FA is not considered secure.</p> </li> </ul> <p></p>"},{"location":"company/kartoza/setting_up_your_computer/#skills","title":"Skills","text":""},{"location":"company/kartoza/strategic_objective/","title":"Kartoza's Strategic Objective","text":"<p>The Kartoza Strategic Objective is the basis for all corporate and individual decision making.</p> <p>Statistically we are the largest FOSS geospatial service provider in South Africa and in the top ten globally.</p> <p>We show up on the first page of google.com and google.co.za searches for these keywords: 'open source GIS'; 'FOSS GIS training'; 'FOSS GIS support'; 'geospatial web development'; 'QGIS development'</p> <p>We aim to grow Kartoza revenue by 15% year on year.</p> <p>We aim to grow our staff complement on a sustainable basis till we reach around 25.</p> <p>We understand that every result is preceded by a 1-2-3-4 step process. It is within these processes that we spend our time, as we relentlessly \"work\" the systems of the business to perfection.</p> <p>Our guiding documents are this Strategic Objective, Our Kartoza Operating Principles, and our collection of Working Procedures.</p> <p>Kartoza's primary offerings are geospatial products and services using Free and Open Source Software. These facilitate spatial decision making and provide tools for economic empowerment.</p> <p>Through intense commitment to our employees, we will contribute to the success of our clients. The consequence of having loyal, smart, hard-working, long-term, and well-compensated staff is superb quality service to customers.</p> <p>Our business is complex, with many human, mechanical and computer systems in simultaneous motion. Success depends on refined communication and organisational processes, dedicated staff, documented procedures, first-class office space and equipment, rigorous quality assurance with continuous measurement, assertive innovation, intense planned maintenance and system improvement, aggressive and measured marketing, and relentless attention to detail in every nook and cranny.</p> <p>Our competitive advantages include an established track record, our ability to solve complex problems with great design, products designed around the unique needs of the customer, thoughtful customer service that is immediate and consistent, the latest high-tech equipment and personal and corporate integrity. We use extraordinarily efficient business systems. We constantly refine and improve all internal systems and mechanisms.</p> <p>To grow, we follow a two-pronged strategy of:</p> <ol> <li>Pursuing substantial consulting, development and implementation projects in our target markets</li> <li>Building products and services that generate passive income, juxtaposed with assertive marketing efforts.</li> </ol> <p>Although we tightly direct Kartoza's operation through guiding documentation, we will modify that documentation immediately if an enhancement can be made: \"Our operational framework is rigid, but that framework can be modified instantly.\"</p> <p>We segment responsibilities into specialised \"expert compartments\" with appropriate cross-training among departments. We have backup personnel for all positions.</p> <p>Kartoza is globally active and locally relevant. Our primary vertical markets include:</p> <ul> <li>Agriculture</li> <li>Disaster preparedness, response and management</li> <li>Land information management</li> <li>Education</li> <li>Humanitarian support</li> <li>SDI support</li> <li>Monitoring and observation</li> <li>Biodiversity and conservation support</li> </ul> <p>(These are fleshed out in [Kartoza-Portfolio-Offerings)</p> <p>Kartoza aims to model itself on the concept of a B-Corporation, in the sense that through the work we do and the people we employ, we aim to be socially and environmentally responsible.</p>"},{"location":"development/","title":"Development","text":"<p>Note that all users, regardless of role, should understand and review the security section.</p> <p>Kartoza is a consulting and development firm. In many instances, projects require developers to leverage existing tools and codebases, and to work with other organisations in a way that is consistent in their own conventions.</p> <p>This documentation seeks to outline processes and practices so that internal project development and practices within the team remain consistent. Where it is noted that beneficial conventions listed here are not implemented in client projects, recommendations may be made that clients adopt such standards.</p> <p>For the most part, however, it is less a concern of how a particular outcome is achieved, but rather that the result is consistent with the appropriate conventions.</p> <ul> <li>Conventions</li> <li>Technologies</li> <li>Environments</li> </ul>"},{"location":"development/developer_practices/","title":"Improving our workflows","text":""},{"location":"development/developer_practices/#dev-team","title":"Dev Team","text":"<ul> <li>Time budget awareness</li> <li>Contngency time</li> <li>Escalating issues when you are hard blocked</li> <li>Need better buffer with clients in terms of delivery planning - let clients know that we work 7 hours a day or need contingency. Need to account for 0.5 day technical debt, internal calls, admin etc. Make use of Marina to communicate this to client.</li> <li>PMs need to ensure that sufficient team members are allocated to meet project timelines</li> <li>Importance of following design</li> <li>Allocating resources to a team who are inefficient derailing</li> <li>Enforcing that clients abide by scope of work</li> <li>Ensure that contracts have terms to limit scope of work to a time budget</li> <li>Figure out how to ignore the urge to add 'extra' features</li> <li>Recognising with your task is going to take longer than planned size</li> <li>How to communicate scope changes about task size </li> <li>Developers should recognise out of scope requests and offer the client the opportunity to create a new contract / contract extension</li> <li>Delivering quality work, not just doing the bare minimum</li> <li>Use your PM to proxy communicate with clients when needed</li> <li>Develop skills in sizing tasks. Always break down tasks into atomic units. You get a psychological advantage of closing off lots of small tasks.</li> <li>Learn to hack your own brain to keep yourself motivated and be able show client regular progress</li> <li>We should match the skills of our team to projects requiring their skills and not assign tasks where they will have to spend too much time learning new technologies not familiar to them.</li> </ul>"},{"location":"development/developer_practices/#gis-team","title":"GIS Team","text":"<ul> <li>Quoting for digitising work: Break the country / region into 30km2 and calculate around 2 days per block. Then add another 2 days for QA per regions.</li> <li>Project kick offs:</li> <li>Drawio meeting where we have a high level but technical project overview discussion and expectations setting</li> <li></li> <li>Where project scope is unclear, there should be a budgeted activity for scope clarification and the scope should be firmed up with the client before starting actual work. Marina should be in the loop on this so that we can hold the client accountable to limit the scope to what we have agreed.</li> <li>Clients should be given parameters for engagement: fixed number of iterations e.g. for review, deadlines for design requirements, clear communication as to when activities have been budgeted for.</li> <li>Plan for learning curves in new technology </li> <li>Build in expert time in projects to swiftly bypass blockers</li> <li>Escalate problems efficiently so that you dont stick on things for days that a team mate could solve in minutes</li> </ul>"},{"location":"development/developer_practices/#training","title":"Training","text":"<ul> <li>Training packages need to be properly setup - Abi needs to review the pack system that Charlie setup </li> <li>Training packages need to be efficient in the training environment e.g. zips already unzipped</li> <li>Onsite training prep pack: cable adapters etc. and also pre training lab check</li> <li>Learner levels should be managed so that we dont mix levels in a group</li> <li>Prefiltering learners with a survey / questionnaire to prepare for what levels learners are</li> <li>Advertising drive at the start of the year</li> <li>SAQA certification we are suckers without SAQA / SAGC / SACE</li> <li>Early bird discounts</li> <li>Post all courses at the start of the year</li> <li>Post training surveys</li> <li>Liven up the training area of the site with interviews and cool media</li> <li>Referral swag or free training for refers</li> <li>Price sensitivity - our prices seem reasonable compared to competitors</li> <li>Mention on the site we have discounts for schools / edu (specify costs)</li> <li>Moodle and platforms like GeoNode training etc need continuous maintenance - test data wiped regularly etc.</li> </ul>"},{"location":"development/developer_practices/#infrastructure","title":"Infrastructure","text":"<ul> <li>GIS infrastructure needs need to be shared with Leon</li> <li>We underutilise our GIS infrastructure and we should look for ways to leverage it more</li> <li>Geoserver and Geocontext are used for clients too, but should we have different infrastructure for clients?</li> <li>sagta map downloader</li> <li>data downloader (by Charlie)</li> <li>staff need to be familiar with our infrastructure to know how to leverage it in work and sales</li> </ul>"},{"location":"development/developer_practices/#devops","title":"Devops","text":"<ul> <li>Level up our SDLC maturity level to allow us to provide more robust solutions</li> <li>Migrate to new infrastrcture Q1 MVP, Q2 Migrations</li> <li>Optimised local environment managed by devops so devs can be productive within a day</li> <li>Operational Areas:</li> <li>Kartoza inhouse systems (should be behind VPN e.g. NC)</li> <li>Kartoza common infrastructre (e.g. postgis.kartoza.com) that can be client facing</li> <li>Developer tools / developer local env</li> <li>Training deploy and scrub platforms</li> <li>Bespoke Client Hosted Applications</li> <li>Generic Client Hosted Applications</li> <li>Kartoza Hardware Inventory</li> <li>Communication plan for clients with the upcoming migrations</li> <li>Communication plan for developers on processes and workflows for SDLC</li> <li>Application catalogue for everything we manage with details of who the client is, what the billing regieme is, who the internal owner is, where the documentation is etc. Workflow for new infrastructure needs to include maintaining the application catalogue. Every application and resource deployed should be tagged with an app id which is tracable back to the app catalogue.</li> <li>Can we use ERP next for the above?</li> <li>Goal to have no orphaned infrastructure</li> <li>Standardising architectures as much as possible</li> <li>Need to be able to specify per-region deployments where customer constraints require it</li> <li>Observability needs to be built into the stack from the ground up (dashboards, alerting, log views)</li> <li>Devops environment needs to be documented from the ground up</li> <li></li> </ul>"},{"location":"development/developer_practices/#management","title":"Management","text":"<ul> <li>Automation of standup history in timesheet app</li> <li>Implementation of planner sheet integrated with ERP Next in timesheet app</li> <li>Burn down charts in timesheet app</li> <li>Strong focus on team leader roles</li> <li>Focus on building our team communication skills (not only in the technical sense but in being proactive communicators)</li> <li>Internal training e.g. Seabilwe presenting basic GIS skills to non GIS staff</li> <li>Succession planning: To ensure that the company does not have reliance on a single person</li> <li>Put in place mechanisms to onramp developers efficiently into our devops stack e.g. developer VMs</li> <li>Proposal development:</li> <li>Internal testing: plan to include testing as a standard and integral part of every project, budgeted as a line item. Testing blowback (developer work that results in lots of failed tests) should reflect in developer KPI's<ul> <li>Functional testing in CI</li> <li>Regression testing in CI</li> <li>Workflow testing in CI (using Playwright)</li> <li>Integration/Deployment testing using DevOps / ArgoCD</li> <li>Manual testing with a test script</li> </ul> </li> <li>Two weeks at end of contract for sign off</li> <li>Client management: we need to ensure that our contracting and project plans manage expectations of clients and that contracts halt until each phase is signed off</li> <li>Proposal development should factor for 7 hour days not 8 in the project plan</li> <li>Look for standardisation in project technology:</li> <li>Devops SDLC</li> <li>Django</li> <li>Postgres / GIS</li> <li>ReactJS</li> <li>MapLibre</li> <li>Vector Tiles</li> <li>Establish spaces for the company to hang out together</li> <li>We need a plan for security:</li> <li>Securing staff computers - policies and communication with staff about best practices - <ul> <li>local disk encryption</li> <li>have I been pwned checks</li> <li>require password managers</li> <li>strong password requirements</li> <li>etc.</li> </ul> </li> <li>Security at network level:<ul> <li>Internal systems (NC, Gdrive, ) requireing YubiKey</li> <li>Move internal systems into VPN</li> </ul> </li> <li>Share incentive scheme in place in 2023</li> <li>Preferential shares eligible for dividends and bonuses</li> <li>Shares vest when the company lists on the stock exchange (not applicable for us?)</li> <li>Establishment of Kartoza.eu and managing impact on Kartoza.za</li> <li>Team meet up</li> <li>Sales handovers - standardize the handover of new work coming in</li> </ul>"},{"location":"development/conventions/","title":"Conventions","text":"<p>Please read and adhere to our coding standards for all of your work.</p> <ul> <li>IDEs</li> <li>Processes</li> <li>Git</li> </ul>"},{"location":"development/conventions/#project-conventions","title":"Project Conventions","text":"<p>SDLC, agile, scrumboards: i.e. project processes</p>"},{"location":"development/conventions/#language-conventions","title":"Language Conventions","text":"<p>A foolish consistency...</p>"},{"location":"development/conventions/#python","title":"Python","text":"<p>python specific content</p>"},{"location":"development/conventions/#javascript","title":"JavaScript","text":"<p>js specific content</p>"},{"location":"development/conventions/#c","title":"C++","text":"<p>c++ specific content</p>"},{"location":"development/conventions/coding_standards/","title":"Python Coding Standards","text":""},{"location":"development/conventions/coding_standards/#general-approach","title":"General Approach","text":"<ul> <li>Use github for revision control, issue tracking and management and use the recommended workflow below whenever possible:</li> <li>Create new Ticket on https://github.com///issues/new <li>Fill in the needed information and description</li> <li>Assign yourself</li> <li>Note ticket number</li> <li>Fork InaSAFE (if not already done)</li> <li>Create new branch called fix-yourticketnumber in your fork</li> <li>Implement feature</li> <li>Pull request your branch into InaSAFE Develop</li> <li> <p>Develop must always pass test and code compliance</p> </li> <li> <p>Adherence to regression/unit testing wherever possible (<code>make test</code>) with a minimum code coverage of 80%.</p> </li> <li>Simple deployment procedure - all dependencies must be delivered with   the plugin installer for QGIS or exist in standard QGIS installs.</li> <li>Develop in the spirit of XP/Agile, i.e. frequent releases, continuous   integration and iterative development. The master branch should always   be assumed to represent a working demo with all tests passing.</li> <li>If a method or function is longer than a single screen, it is probably a   candidate for refactoring into smaller methods / functions. Writing smaller   methods makes your code easier to read and to test.</li> <li>If you use a few lines of code in more than one place, refactor them into   their own function.</li>"},{"location":"development/conventions/coding_standards/#platform-support-for-qgis-plugins","title":"Platform support for QGIS plugins","text":"<p>Currently the following platforms should be supported:</p> <ul> <li>OSX - latest release</li> <li>Linux - Ubuntu current LTS</li> <li>Windows - 10,11</li> </ul>"},{"location":"development/conventions/coding_standards/#compliance","title":"Compliance","text":"<ul> <li>Coding must follow a style guide. In case of Python it is   PEP8 and   using the command line tool pep8 (or <code>make pep8</code>) to enforce this.   The pep8 checks E121-E128 have been disabled until pep8 version 1.3 becomes   widely available.</li> <li>Python documentation guide</li> <li>Code must pass a pylint validation. You can test   this using the make target <code>make pylint</code>. In some cases you may wish to   override a line or group of lines so that they are not validated by pylint.   You can do this by adding either:</li> </ul> <pre><code>     import foo  # pylint: disable=unused-imports\n</code></pre> <p>or:</p> <pre><code>     # pylint: disable=unused-imports\nimport foo\nprint 'hello'\nprint 'goodbye'\n# pylint: enable=unused-imports\n</code></pre> <p>Note: The use of messages codes (e.g. <code>disable=W1234</code>) should be considered deprecated. Any new exceptions should be added using the keyword format (e.g. <code>disable=unused-exceptions</code>).</p> <p>.. note:: You can globally ignore messages by adding them to :file:<code>pylintrc</code>      in the :samp:<code>[MESSAGES CONTROL]</code> section.</p> <p>The following pylint messages have been thus globally excluded from the check. For a discussion of these see also github issue #245.</p> <ul> <li>All type R: Refactor suggestions such as limiting the number of local                 variables. We may bring some back later.</li> <li>All type I: Information only</li> <li>W0142: Allow the Python feature F(*args, **kwargs)</li> <li>W0201: Allow definition of class attributes outside the constructor.</li> <li>W0212: Allow access to protected members (e.g. _show_system_info)</li> <li>W0231: Allow classes without constructors.</li> <li>W0232: Un-instantiated classes is a feature used in this project.</li> <li>W0403: Relative imports are OK for modules that live in the same dir</li> <li>W0511: Appearance of TODO and FIXME is not a sign of poor quality</li> <li>E1101: Disable check for missing attributes.</li> <li>E1103: This one does not understand numpy variables.</li> <li>C0103: Allow mathematical variables such as x0 or A.</li> <li>C0111: Allow missing docstrings in some cases</li> <li>C0302: No restriction on the number of lines per module</li> </ul> <p>The following pylint check has been removed from Jenkins due to a bug in astroid.   * E1002: Use of super on an old style class.</p> <p>It is of course possible to run all pylint checks on any part of the code   if desired: E.g pylint safe/storage/raster.py</p>"},{"location":"development/conventions/coding_standards/#naming-conventions","title":"Naming conventions","text":"<p>Variable names should as far as possible follow python naming conventions (see Qt Notes below for exceptions to this rule).</p> <p>We reject the idea the code should be obfuscated with hard to understand symbol names. For this reason all classes, methods, functions, variable names should be written in full. At the same time overly verbose names should be avoided. Here is an example of what we mean by this:</p> <p>Bad:</p> <pre><code>    cur_dpth = 0  # obscure\ncurrentDepth = 0  # camel case is not python standard\ncontent_of_page = 'foo'  # overly verbose\n</code></pre> <p>Good</p> <pre><code>    current_depth = 0\npage_content = 'foo'\n</code></pre> <p>Avoid 'yoda speak' in variable names. </p> <p>Bad:</p> <pre><code>    title_dialog = self.tr('Save Scenario')\n</code></pre> <p>Good:</p> <pre><code>    dialog_title = self.tr('Save Scenario')\n</code></pre> <p>This is a summary of the naming conventions you should use:</p> <ul> <li>package dir name: concise (preferably single word) lower case, underscore   separated e.g. <code>utilities</code>.</li> <li>module file name: concise (preferably single word) lower case, underscore   separated e.g. <code>utilities.py</code>.</li> <li>class name: Concise singular camel case phrase e.g. <code>PrintDialog</code>.</li> <li>method and function name: Concise lower case underscore separated name   .e.g. <code>remove_entry</code>. Avoid java style get suffixes as it adds no   useful meaning to a symbol name.</li> <li>variable naming: Concise, unabbreviated, lower case, underscore separated   e.g. <code>population_count</code>.</li> </ul>"},{"location":"development/conventions/coding_standards/#code-formatting","title":"Code formatting","text":"<p>The guidelines above still leave substantial room for your own approach to code style so the following provide some more explicit guidelines.</p> <p>We follow a 'pull left' policy in our code. This means that instead of e.g.::</p> <pre><code>    def polygonize_thresholds(raster_file_name,\nthreshold_min=0.0,\nthreshold_max=float('inf')):\n</code></pre> <p>You should rather do this:</p> <pre><code>    def polygonize_thresholds(\nraster_file_name,\nthreshold_min=0.0,\nthreshold_max=float('inf')):\n</code></pre> <p>The same applies in all other contexts. For example, calling a function:</p> <pre><code>    clipped_exposure = clip_layer(\nlayer=exposure_layer,\nextent=geo_extent,\ncell_size=cell_size,\nextra_keywords=extra_exposure_keywords,\nhard_clip_flag=self.clip_hard)\n</code></pre> <p>We do this because the 80 character line limit in PEP8 can cause visual clutter in your code as you manage line breaks as you run up to the 80 column limit. By always pulling code left as much as possible, we reduce the amount of line continuation management we have to do.</p>"},{"location":"development/conventions/coding_standards/#ordering-of-imports","title":"Ordering of imports","text":"<p>When importing please adhere to the following rules:</p> <p>Do not do <code>*</code> imports e.g. </p> <p><pre><code>from PyQt4.QtGui import *\n</code></pre> is bad.</p> <p>Either import the individual modules you need e.g.</p> <p><pre><code>from PyQt4.QtGui import QProgressDialog\n</code></pre> or import the whole package and use the namespace to reference a module e.g.:</p> <pre><code>    from PyQt4 import QtGui\nprogress = QtGui.QProgressDialog()\n</code></pre> <p>Imports should be made in the following order:</p> <ul> <li>core python imports (e.g. <code>import os</code>)</li> <li>third party imports (e.g. <code>from PyQt4 import QtGui</code>)</li> <li>application imports (e.g. <code>from foo import bar</code>)</li> </ul>"},{"location":"development/conventions/coding_standards/#doc-strings-and-comments","title":"Doc strings and comments","text":"<p>All code should be self documenting. Please take special note and follow these PEP guidelines and sphinx documents:</p> <ul> <li>http://www.python.org/dev/peps/pep-0287/</li> <li>http://sphinx-doc.org/markup/desc.html#info-field-lists</li> <li>http://thomas-cokelaer.info/tutorials/sphinx/docstring_python.html</li> </ul> <p>We follow these specific guidelines for our code:</p> <ul> <li>Docstrings must triple quoted with <code>\"\"\"</code></li> <li>Inline comments should start with a # and a single space.</li> <li>Comments should be complete sentences ending with a full stop / period.</li> <li>If a comment is a phrase or sentence, its first word should be capitalized,   unless it is an identifier that begins with a lower case letter (never alter   the case of identifiers!).</li> </ul> <p>We use the following style for documenting functions and class methods:</p> <pre><code>class MyObject(object):\n\"\"\"My new class.\"\"\"\ndef set_keyword_db_path(self, path):\n\"\"\"Set the path for the keyword database (sqlite).\n        The file will be used to search for keywords for non local datasets.\n        :param path: A valid path to a sqlite database. The database does\n            not need to exist already, but the user should be able to write\n            to the path provided.\n        :type path: str\n        :returns: Flag indicating if the path was set successfully.\n        :rtype: boolean\n        \"\"\"\nself.keyword_db_path = str(path)\n</code></pre> <p>Another example:</p> <pre><code>class MyObject(object):\n\n   \"\"\"My new class.\"\"\"\n\n    def add_layers(scenario_dir, paths):\n        \"\"\"Add the layers described in a scenario file to QGIS.\n\n        :param scenario_dir: Base directory to find path.\n        :type scenario_dir: str\n\n        :param paths: Path of scenario file (or a list of paths).\n        :type paths: str, list\n\n        :raises: Exception, TypeError, FileNotFoundError\n\n        .. note::\n            * Exception - occurs when paths have illegal extension\n            * TypeError - occurs when paths is not string or list\n            * FileNotFoundError - occurs when file not found\n    \"\"\"\n</code></pre> <p>Note the following in the above examples:</p> <ul> <li>The first line of a docstring should be a precis of the class/method/function   expressed in less than 80 chars, terminated with a full stop and exclude   redundant phrases such as 'Class to do x' or 'This method does...'.</li> <li>There should be an empty line following the first docstring line.</li> <li>More detailed explanation and usage examples can follow this first line. The   detailed explanation should not repeat the information provided in the   parameters and returns sections.</li> <li>A line break should follow the optional detailed description.</li> <li>param and type are grouped together with no line break between them.</li> <li>If the param description is more than one line, indent the successive lines   with 4 spaces.</li> <li>A newline should be placed after each type and rtype.</li> <li>If multiple types are allowed, separate them with commas e.g. <code>:rtype: str,   boolean</code>.</li> <li>If a function or method returns nothing, no returns section is used.</li> <li>If a function or method does not raise anything explicitly, no raises section   is used.</li> <li>If a function or method is extremely obvious there is no need to have   anything more than a single line docstring.</li> <li>If a function or method returns a tuple it should be be documented as   <code>:rtype: (&lt;type&gt;, &lt;type&gt;, ..)</code> e.g. <code>:rtype: (int, int)</code>.</li> </ul> <p>Please also see the api documentation how-to section for more information on how to document your code properly.</p>"},{"location":"development/conventions/coding_standards/#annotating-api-changes-and-additions","title":"Annotating API changes and additions","text":"<p>Whenever you add or change a module, class, function or method, you should annotate it accordingly. The method for doing this is described on the <code>Sphinx paragraph markup page &lt;http://sphinx-doc.org/markup/para.html&gt;</code>_. Here are a couple of examples:</p> <p>Adding a new module:</p> <pre><code>    \"\"\"Impact function utilities.\n    .. versionadded:: 2.1\n    \"\"'\n</code></pre> <p>Adding a new method to a class:</p> <pre><code>    \"\"\"Computes the number of affected people.\n\n    .. versionadded:: 2.1\n    \"\"\"\n</code></pre> <p>Changing an existing method API:</p> <pre><code>    def show_static_message(self, message, foo):\n    \"\"\"Send a static message to the message viewer.\n\n    .. versionchanged:: 2.1\n        Added foo parameter.\n\n    Static messages cause any previous content in the MessageViewer to be\n    replaced with new content.\n\n    :param message: An instance of our rich message class.\n    :type message: Message\n\n    :param foo: Some new parameter.\n    :type foo: str\n\n    \"\"\"\n    dispatcher.send(\n        signal=STATIC_MESSAGE_SIGNAL,\n        sender=self,\n        message=message)\n</code></pre>"},{"location":"development/conventions/coding_standards/#strings-and-internationalisation","title":"Strings and internationalisation","text":"<ul> <li>Simple strings in source code should be quoted with <code>'</code></li> <li>Favour interpolation over concatenation. For example this is bad:</li> </ul> <pre><code>    world = 'World'\nfoo = 'Hello ' + world\n</code></pre> <p>And this is good:</p> <pre><code>    world = 'World'\n    food = 'Hello %s' % world\n</code></pre> <ul> <li>Use parenthesis for long strings. For example this is bad:</li> </ul> <pre><code>    foo = 'The quick brown fox jumps over the lazy dog. ' +\n'The slow fat rat runs around the mouldy cheese.'\n</code></pre> <p>And this is good:</p> <pre><code>    bar = (\n'The quick brown fox jumps over the lazy dog. '\n'The slow fat rat runs around the mouldy cheese.')\n</code></pre> <p>Note: The good example above follows the 'pull left' principle.</p> <ul> <li>All strings should be internationalisation enabled. Please see [i18n]   for details.</li> <li> <p>When using gettext, alias the uggettext as tr, and do not use the common   convention of <code>_('foo')</code> as the underscore trips up some tools like pylint,   sphinx. Also using <code>tr</code> makes it easy to migrate code to and from Qt's   translation system and gettext. Note: gettext use is deprecated in InaSAFE.</p> </li> <li> <p>If you use a literal string or expression in more than one place, refactor   it into a function or variable.</p> </li> </ul>"},{"location":"development/conventions/coding_standards/#standard-headers","title":"Standard headers","text":"<p>Each source file should include a standard header containing copyright, authorship and version metadata as shown in the exampled below.</p> <p>Example standard header</p> <pre><code># -*- coding: utf-8 -*-\n\"\"\"One line description.\n\n.. tip::\n   Detailed multi-paragraph description...\n\"\"\"\n\nimport os  # python core imports first\nimport qgis.core  # then external imports\nimport safe.utils.gis  # then project imports (always using full path)\n\n__copyright__ = \"Copyright 2016, The InaSAFE Project\"\n__license__ = \"GPL version 3\"\n__email__ = \"info@inasafe.org\"\n__revision__ = '$Format:%H$'\n</code></pre> <p>Note:: Please see [faq_developer] for details on how the revision tag is replaced with the SHA1 for the file when the release packages are made.</p>"},{"location":"development/conventions/coding_standards/#qt-guidelines","title":"Qt Guidelines","text":"<p>Compile UI files at run time. There is no need to precompile UI files using pyuic4. Rather you can dynamically compile them using this technique (see technical docs here:</p> <pre><code>    import os\nfrom PyQt4 import QtGui, uic\nBASE_CLASS = uic.loadUiType(os.path.join(\nos.path.dirname(__file__), 'foo_dialog_base.ui'))[0]\nclass FooDialog(QtGui.QDialog, BASE_CLASS):\n\"\"\"Dialog for defining the plugin properties.\n        \"\"\"\ndef __init__(self, parent=None):\n\"\"\"Constructor.\"\"\"\nsuper(FooDialog, self).__init__(parent)\n# Set up the user interface from Designer.\nself.setupUi(self)\n</code></pre> <p>Don't use old style signal/slot connectors:</p> <pre><code>    QtCore.QObject.connect(\nself.help_button, QtCore.SIGNAL('clicked()'), self.show_help)\n</code></pre> <p>Use new style connectors::</p> <pre><code>    self.help_button.clicked.connect(self.show_help)\n</code></pre> <p>Use multi-inheritance for designer based classes so that we can use autoconnect slots.:</p> <pre><code>    class FooDialog(QtGui.QDialog, Ui_FooBase):\n\"\"\"Dialog to prompt for widget names.\"\"\"\ndef __init__(self, parent=None):\n\"\"\"Constructor for the dialog.\n            This dialog will allow the user to select foo names from  a list.\n            :param parent: Optional widget to use as parent\n            :type parent: QWidget\n            \"\"\"\nQtGui.QDialog.__init__(self, parent)\n# Set up the user interface from Designer.\nself.setupUi(self)\n# ... further implementation here ...\n</code></pre> <p>Then we can do this to listen for a click on button bar:</p> <pre><code>    def on_bar_clicked(self):\n\"\"\"Auto slot to listen for button click.\"\"\"\npass\n</code></pre> <p>The callback above is called when the button is clicked simply by virtue of the fact that it uses the naming convention <code>on_&lt;object&gt;_clicked</code>.</p> <p>Note that in some cases you need to explicitly specify which signature is being listened for by using the pyqtSignature decorator:</p> <pre><code>    @pyqtSignature('int')\n    def on_polygon_layers_combo_currentIndexChanged(self, theIndex=None):\n        \"\"\"Automatic slot executed when the layer is changed to update fields.\n\n        :param theIndex: Passed by the signal that triggers this slot.\n        :type theIndex: int\n        \"\"\"\n        layerId = self.polygon_layers_combo.itemData(\n            theIndex, QtCore.Qt.UserRole)\n        return layer_id\n</code></pre> <p>Failure to do this may result in the slot being called multiple times per event which is usually undesirable.</p> <p>Also in some cases using the Qt API will lead you into conflict with our PEP8 naming conventions for methods and variables. This is unavoidable but should be used only in these specific instances e.g.:</p> <pre><code>    def on_foo_indexChanged():\npass\n</code></pre> <p>Qt's naming convention causes a bit of a clash when using with 'normal' python underscore names. For this reason we adopt the following strategy:</p> <ul> <li>in designer use underscore based naming for objects</li> <li>in your concrete implementations you should be able to then use mostly   underscore separated names except in cases where using autoconnect slots.</li> <li>in designer you should call the form a name ending in Base e.g.   <code>FooDialogBase</code>. By convention the concrete implementation is called the   same sans the Base suffix e.g. <code>FooDialog</code>.</li> </ul>"},{"location":"development/conventions/coding_standards/#human-interface-guidelines","title":"Human Interface Guidelines","text":"<p>Please see the dedicated page for Human Interface Guidelines.</p>"},{"location":"development/conventions/coding_standards/#code-statistics","title":"Code statistics","text":"<ul> <li>https://www.ohloh.net/p/inasafe/analyses/latest</li> <li>https://github.com/AIFDR/inasafe/network</li> <li>https://github.com/AIFDR/inasafe/graphs</li> </ul>"},{"location":"development/conventions/coding_standards/#working-with-git","title":"Working with GIT","text":"<ul> <li>Additions to the develop branch should be made via the GitHub pull request mechanism</li> <li>Pull requests should preferably be squashed into a single commit before applying (see http://eli.thegreenplace.net/2014/02/19/squashing-github-pull-requests-into-a-single-commit)</li> <li>Commits and pull requests should reference the issue number they close or contribute to</li> </ul>"},{"location":"development/conventions/coding_standards/#landscape","title":"Landscape","text":"<pre><code># coding=utf-8-\n\"\"\"One line description with full stop. New line after file-docstring.\"\"\"\nimport os\nimport qgis.core\nimport safe.utils.gis\n__copyright__ = \"Copyright 2016, The InaSAFE Project\"\n__license__ = \"GPL version 3\"\n__email__ = \"info@inasafe.org\"\n__revision__ = '$Format:%H$'\nclass MyObject(object):\n\"\"\"Class docstring with one new line before and after and full stop.\"\"\"\ndef my_function(self, foo):\n\"\"\"One line descriptive sentence with full stop and a new line between each block.\n    Extra information goes here.\n    :param foo: Text with full stop.\n    :type foo: object\n    :return: It returns something.\n    :rtype: basestring\n    \"\"\"\ni = 0  # No new line after method/function docstring.\nreturn i\n</code></pre>"},{"location":"development/conventions/dev_processes/","title":"Development Processes","text":"<p>Development processes</p> <p>https://kartoza.com/en/coding-standards/ https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html</p>"},{"location":"development/conventions/git/","title":"Git","text":"<ol> <li>Tell everyone to use GitLens. It's amazing</li> <li>Outline other standard processes and tools (precommits, hooks, workflows, gitflows etc)</li> </ol>"},{"location":"development/conventions/ides/","title":"IDEs","text":"<p>This section covers Integrated Development Environments. Whilst it is not required that all users leverage the same IDE, it is beneficial to have a consistent environment across the team and ensure all team members have access to the appropriate tools.</p> <ul> <li>VSCode (almost anything)</li> <li>Pycharm</li> <li>QTCreator</li> </ul>"},{"location":"development/conventions/ides/#configuration","title":"Configuration","text":"<p>Recommended and required configurations should be listed here</p> <p>General opinions can be handed off to Environment Links</p>"},{"location":"development/conventions/ides/#vscode","title":"VSCode","text":"<ul> <li>GitLens (recommended): Really great UX and insights into git</li> <li>GitMoji (recommended): Don't forget to use emoji in your commit messages</li> </ul>"},{"location":"development/conventions/project_processes/","title":"Project Processes","text":"<p>Make GitHub projects (in the project repo or kartoza organisation?)</p> <p>Keep those projects up to date</p> <pre><code>graph LR\n    A[Check for existing task]--&gt;B[Update task state];\n    B--&gt;C[Perform work on task];\n    C--&gt;D[Commit changes];\n    D--&gt;B;</code></pre>"},{"location":"development/environments/","title":"Environments","text":"<p>Development environments configurations and conventions (conda/ venv/ poetry/ git codespaces/ docker workspaces etc)</p> <p>Links and external resources</p>"},{"location":"development/environments/links/","title":"Development Resources","text":"<p>External resources, links, and recommendations fo development environment configuration.</p>"},{"location":"development/environments/links/#vscode","title":"VSCode","text":"<p>see links</p>"},{"location":"development/environments/links/#sql","title":"SQL","text":"<p>Use postgresql for everything. Dbeaver and Pgadmin are good tools. https://www.beekeeperstudio.io/</p>"},{"location":"development/environments/vscode/extension_install/","title":"Bulk Extension Installation","text":"<p>If you want to install VSCode extensions suggested by Rudolf, you can follow these steps.</p> <ol> <li>Open this file.</li> <li>Copy the contents.</li> <li>Open VSCode.</li> <li>Open a new terminal</li> <li>Paste the file content in the terminal.</li> </ol> <p>This should install all the extensions (can take a while). This setup is a bit general case, with a heavy focus on python and django naturally.</p>"},{"location":"development/environments/vscode/links/","title":"VSCode Resources","text":"<p>External resources, links, and recommendations fo VSCode  configuration.</p> <p>Suggestions from Rudolph, 2022/04</p> <ol> <li>Lightweight postman alternative inside vsc    https://marketplace.visualstudio.com/items?itemName=humao.rest-client</li> <li>Manage all your unit tests in a neat organised side bar in vsc - check docs for install guide. Also works with basically all test frameworks!    https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-test-explorer    https://marketplace.visualstudio.com/items?itemName=ms-vscode.test-adapter-converter    https://marketplace.visualstudio.com/items?itemName=LittleFoxTeam.vscode-python-test-adapter</li> <li>Track how much time you spend on all your projects. also tracks lines of code added/deleted/etc    https://marketplace.visualstudio.com/items?itemName=iceworks-team.iceworks-time-master</li> <li>Docker management    https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker    https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers</li> <li>Django snippets - this extension is a bit hidden away for some reason. This is really awesome for django dev specific snippets for models, forms, views etc. really useful!    https://marketplace.visualstudio.com/items?itemName=thebarkman.vscode-djaneiro</li> <li>Python Docstrings - but I'm sure there are better extensions     https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring    I have a few other quality of life extensions:    https://marketplace.visualstudio.com/items?itemName=vscode-icons-team.vscode-icons - essential    https://marketplace.visualstudio.com/items?itemName=adam-watters.vscode-color-pick - front end devs looking for colour codes    https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock - livens up vsc theme with a splash of colour    https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag - html auto rename the closing tag    https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag - creates closing tag (helpful when using html in not html files like Vue, but might be unnecessary lol)    Honorary mentions:    https://marketplace.visualstudio.com/items?itemName=donjayamanne.python-extension-pack    https://marketplace.visualstudio.com/items?itemName=alefragnani.project-manager    https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode    https://marketplace.visualstudio.com/items?itemName=donjayamanne.git-extension-pack    https://marketplace.visualstudio.com/items?itemName=uctakeoff.vscode-counter    -All the intellisense extensions for all the languages :)    A lot of these extensions have alternatives as well so it's recommended to play around with a few of them.</li> </ol>"},{"location":"development/technologies/","title":"Technologies","text":"<p>It makes sense to attempt some level of standardisation across development practices, including technologies and frameworks in use, so that the barrier for entry to projects is lowered and it becomes simple to maintain consistent practices across the organisation.</p> <ul> <li>Languages</li> <li>Frameworks</li> </ul>"},{"location":"development/technologies/#evaluating","title":"Evaluating","text":"<p>It may be helpful to include some \"smell tests\" for evaluating good projects or technologies</p>"},{"location":"development/technologies/frameworks/","title":"Frameworks","text":"<p>Standardise on the frameworks used to encourage collaboration and efficiency.</p>"},{"location":"development/technologies/frameworks/#cross-platform","title":"Cross platform","text":"<ul> <li>QT (multiple)</li> <li>React native (js)</li> <li>Flutter (dart)</li> <li>Quasar (js)</li> <li>Beeware (python)</li> <li>Kivy (python)</li> </ul>"},{"location":"development/technologies/frameworks/#desktop","title":"Desktop","text":"<ul> <li>See the cross platform section.</li> <li>tauri (js/ rust): Uses a rust backend and javascript frontend as a more performant alternative to electron, which bundles chromium into every build.</li> </ul>"},{"location":"development/technologies/frameworks/#mobile","title":"Mobile","text":"<p>If you're not going native, use the cross platform frameworks please.</p>"},{"location":"development/technologies/frameworks/#web","title":"Web","text":"<ul> <li>Django (python): Default to django. It's batteries included.</li> <li>Flask (python): Light weight python server</li> <li>FastApi (python): It's shiny, but pretty great. If you're a fan of starlette and async, and you only want a REST API, FastApi is where you might want to head. 90% of the time, use django+drf, or extend flask (more of the team can help you out there too). If you have to ask if you should use it, you probably shouldn't.</li> <li>Express (js): Serverside js.</li> <li>NextJS (js): Serverside react.</li> <li>Rails (ruby): If you are using or extending something in ruby (not recommended)</li> <li>tauri: Uses a rust backend and javascript frontend as a more performant alternative to electron, which bundles chromium into every build.</li> </ul>"},{"location":"development/technologies/frameworks/#docs","title":"Docs","text":"<p>Use Material Mkdocs</p>"},{"location":"development/technologies/frameworks/#jamstack","title":"Jamstack","text":"<p>Default to Hugo.</p>"},{"location":"development/technologies/frameworks/#gis","title":"GIS","text":"<p>OpenLayers, Leaflet, and CesiumJS. Turf.js, MapLibre. GeoDjango. pg_featureserv/ pg_tilserv.</p>"},{"location":"development/technologies/frameworks/#ui","title":"UI","text":"<p>Ensuring that consistent UI component libraries are used improves quality, efficiency, and consistency across applications and the overall UX.</p>"},{"location":"development/technologies/frameworks/#css-frameworks","title":"CSS frameworks","text":"<p>Bootstrap, bulma, tailwind</p>"},{"location":"development/technologies/frameworks/#component-libraries","title":"Component libraries","text":"<p>Nobody will stop you from starting an app in kotlin, but it's unlikely to get the momentum or collaboration that is desired within the organisation.</p>"},{"location":"development/technologies/languages/","title":"Languages","text":"<p>Focus is on python, javascript, and C++, but anything goes really.</p> <p>Note that python is the preferred language for tool and application implementation for a number of reasons, including having consistent tooling and ensuring that everyone on the team is able to collaborate. By remaining consistent and lowering the</p> <p>Javascript cannot be escaped on the modern web, and so is a requirement by default. In instances where is makes sense, using serverside javascript is certainly supported, but python is still the preferred approach.</p> <p>C++ is used for QGIS development and the focus for conventions will be on using C++ with QT.</p> <p>There are no strict rules applied to technology, so everybody is free to use whatever works, and a key ability in open source ecosystems is to remain adaptable and be capable of leveraging the existing tools that are the best available. Stand on the shoulders of giants where you can.</p> <p>Because these are not considered core competencies, there aren't really any expectations, requirements, or recommendations that apply to other ecosystems. How users choose to code in rust, go, ruby, or c is entirely up to them. But there are caveats.</p> <p>Boring solutions often work best. The newest shiny can be fun but it's rarely a good idea to dive into early adoption. Team work is important, and it's hard to work as a team when you're using esoteric tools.</p> <p>When in doubt, have a look at a chart of Diffusion of innovations and try assess if the current position is at the end of the early adopter and start of the early majority group.</p> <p>This includes the development of mobile, cross platform, or native apps. Whilst universal support for PWAs lingers, it is still a way off from being the de facto standard for the development industry. In the meantime, stick to using tools that the rest of the team can get up to speed with quickly or have experience with, such as QT, python, or javascript. Nobody will stop you from starting an app in kotlin, but it's unlikely to get the momentum or collaboration that is desired within the organisation.</p>"},{"location":"devops/","title":"DevOps","text":"<p>Resources, information, and processes related to DevOps and system administration.</p> <p>Note that all users, regardless of role, should understand and review the security section.</p> <p>Note that this is not limited to DevOps team members and may include conventions and configuration for the management of workstations, servers, and other systems, which is relevant to multiple roles.</p> <ul> <li>Security</li> <li>Procedures</li> <li>Infrastructure</li> </ul>"},{"location":"devops/applications/standard-applications/","title":"Standard Deployment Applications","text":"<ul> <li>Geoserver</li> <li>Filebrowser</li> <li>pg-backups</li> <li>Postgres</li> <li></li> </ul>"},{"location":"devops/infrastructure/","title":"Infrastructure","text":"<ul> <li>Development Infrastructure</li> <li>Personal Infrastructure</li> <li>Containers</li> <li>Kubernetes</li> <li>Rancher</li> <li>Rancher Desktop</li> <li>Development</li> <li>Staging</li> <li>Production</li> <li>CI/CD</li> </ul>"},{"location":"devops/infrastructure/#rancher-topics","title":"Rancher Topics","text":"<p>Using Rancher, K3S, and Longhorn for single node Kubernetes deployment</p>"},{"location":"devops/infrastructure/personal_infrastructure/","title":"Personal Kubernetes Infrastructure","text":""},{"location":"devops/infrastructure/personal_infrastructure/#initial-setup","title":"Initial Setup","text":"<p>This are initial notes from Tim on setting up a personal docker, rancher desktop and rancher server testbed environment.</p> <p>I started by setting up rancher desktop on my Fedora based linux laptop. I used the appimage (despite a concerning looking warning that firefox gives about the image when downloading it.)</p> <p>Here is the installation guide.</p> <p>Note: After upgrading to fedora 36 rancher desktop no longer started until I applied the following fix: https://github.com/rancher-sandbox/rancher-desktop/issues/2139#issuecomment-1114933138</p> <p>Once installed I performed the following commands to do a quick start setup of nginx running in the k8 cluster.</p> <pre><code>kubectl get nodes\n</code></pre> <p>NAME                   STATUS   ROLES                  AGE   VERSION lima-rancher-desktop   Ready    control-plane,master   80m   v1.22.7+k3s1 </p> <pre><code>kubectl create deployment nginx --image=nginx\n</code></pre> <p>deployment.apps/nginx created</p> <pre><code>kubectl get pods\n</code></pre> <p>NAME                     READY   STATUS              RESTARTS   AGE nginx-6799fc88d8-7k4kd   0/1     ContainerCreating   0          10s</p> <pre><code>kubectl describe nginx-6799fc88d8-7k4kd\n</code></pre> <p>error: the server doesn't have a resource type \"nginx-6799fc88d8-7k4kd\"</p> <pre><code>kubectl describe pod nginx-6799fc88d8-7k4kd\n</code></pre> <p>Name:         nginx-6799fc88d8-7k4kd Namespace:    default Priority:     0 Node:         lima-rancher-desktop/192.168.5.15 Start Time:   Sat, 23 Apr 2022 22:57:06 +0100 Labels:       app=nginx pod-template-hash=6799fc88d8 Annotations:  none Status:       Running IP:           10.42.0.9 IPs: IP:           10.42.0.9 Controlled By:  ReplicaSet/nginx-6799fc88d8 Containers: nginx:     &gt; Container ID:   containerd://f85e833716a254f9e981ebf6c0f432edab366aacdfa74cc46b84904e6afc8760 Image:          nginx     &gt; Image ID:       docker.io/library/nginx@sha256:859ab6768a6f26a79bc42b231664111317d095a4f04e4b6fe79ce37b3d199097 Port:           none Host Port:      none State:          Running Started:      Sat, 23 Apr 2022 22:57:23 +0100 Ready:          True Restart Count:  0 Environment:    none Mounts:       &gt; /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-hl4hc (ro) Conditions: Type              Status Initialized       True Ready             True ContainersReady   True PodScheduled      True Volumes: kube-api-access-hl4hc:     &gt; Type:                    Projected (a volume that contains injected data from multiple sources) TokenExpirationSeconds:  3607 ConfigMapName:           kube-root-ca.crt ConfigMapOptional:       nil DownwardAPI:             true QoS Class:                   BestEffort Node-Selectors:              none Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s                              &gt; node.kubernetes.io/unreachable:NoExecute op=Exists for 300s Events: Type    Reason     Age   From               Message   ----    ------     ----  ----               ------- Normal  Scheduled  33s   default-scheduler  Successfully assigned default/nginx-6799fc88d8-7k4kd to lima-rancher-desktop Normal  Pulling    33s   kubelet            Pulling image \"nginx\" Normal  Pulled     17s   kubelet            Successfully pulled image \"nginx\" in 16.398944871s Normal  Created    17s   kubelet            Created container nginx Normal  Started    16s   kubelet            Started container nginx</p> <pre><code>kubectl get pods\n</code></pre> <p>NAME                     READY   STATUS    RESTARTS   AGE nginx-6799fc88d8-7k4kd   1/1     Running   0          44s</p> <pre><code>kubectl get pods -o wide\n</code></pre> <p>NAME                     READY   STATUS    RESTARTS   AGE   IP          NODE                   NOMINATED NODE   READINESS GATES nginx-6799fc88d8-7k4kd   1/1     Running   0          57s   10.42.0.9   lima-rancher-desktop   none           none</p> <pre><code>kubectl exec -it nginx-6799fc88d8-7k4kd /bin/sh\n</code></pre> <p>kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future &gt; &gt; version. Use kubectl exec [POD] -- [COMMAND] instead.</p> <pre><code>curl 10.42.0.9\n</code></pre> <p>Welcome to nginx! html { color-scheme: light dark; } body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; }</p> <p>Welcome to nginx! If you see this page, the nginx web server is successfully installed and working. Further configuration is required.</p> <p>For online documentation and support please refer to nginx.org Commercial support is available at nginx.com</p> <p>Thank you for using nginx.</p> <pre><code>kubectl get pods\n``\n&gt; NAME                     READY   STATUS    RESTARTS   AGE\n&gt; nginx-6799fc88d8-7k4kd   1/1     Running   0          2m45s\n\nThese steps are verbatim from [this youtube video](https://www.youtube.com/watch?v=LwE8IA3glE4).\n\nFrom this initial run through we can assume these basic concepts:\n\n![K8 Concepts](img/k8-concepts.png)\n## Deploying Rancher on Rancher Desktop\nI remember that Dominic explained about namespaces in his initial walk through so let me try to create a new  namespace.\n\n```bash\nkubectl create namespace tim\n</code></pre> <p>While trying to figure out how to list my namespaces, I found this nice k8 cheatsheet.</p> <p>The above cheatsheet didnt actually contain the tip I needed but a bit of googling came up with this:</p> <pre><code>kubectl get namespaces --show-labels\n</code></pre> <p>NAME              STATUS   AGE     LABELS default           Active   141m    kubernetes.io/metadata.name=default kube-system       Active   141m    kubernetes.io/metadata.name=kube-system kube-public       Active   141m    kubernetes.io/metadata.name=kube-public kube-node-lease   Active   141m    kubernetes.io/metadata.name=kube-node-lease tim               Active   3m34s   kubernetes.io/metadata.name=tim</p> <p>You can see my tim namespace listed as the last entry there. So based on doing that, I think I can update my concept diagram to look like this:</p> <p></p> <pre><code>kubectl\n</code></pre> <p>apiVersion: v1 kind: Pod metadata: name: nginxpod namespace: tim labels: name: nginxpod spec: containers:</p> <ul> <li>name: web     image: nginx</li> </ul> <p>I saved the above as nginx.yml and was able to run it like this:</p> <pre><code>kubectl apply -f nginx.yml\n</code></pre> <p>Then I could check in the tim namespace to see if it was running:</p> <pre><code>kubectl get pods -A\n</code></pre> <p>NAMESPACE     NAME                                      READY   STATUS      RESTARTS   AGE kube-system   local-path-provisioner-84bb864455-dsv47   1/1     Running     0          150m kube-system   helm-install-traefik-crd--1-xrhvf         0/1     Completed   0          150m kube-system   svclb-traefik-p9zwj                       2/2     Running     0          150m kube-system   helm-install-traefik--1-m2r2x             0/1     Completed   1          150m kube-system   coredns-96cc4f57d-5bzj8                   1/1     Running     0          150m kube-system   traefik-56c4b88c4b-mpwfm                  1/1     Running     0          150m kube-system   metrics-server-ff9dbcb6c-6gzt5            1/1     Running     0          150m default       nginx-6799fc88d8-7k4kd                    1/1     Running     0          69m tim           nginxpod                                  1/1     Running     0          14s</p> <p>We can see my nginx pod in my namespace as the last entry.</p>"},{"location":"devops/infrastructure/personal_infrastructure/#exit","title":"exit","text":""},{"location":"devops/infrastructure/personal_infrastructure/#installing-rancher-on-rancher-desktop","title":"Installing Rancher on Rancher Desktop","text":"<p>I went here for instructions.</p> <pre><code>helm repo add rancher-latest https://releases.rancher.com/server-charts/latest\nkubectl create namespace cattle-system\nhelm install rancher rancher-latest/rancher   --namespace cattle-system   --set hostname=crest   --set replicas=1 --set ingress.tls.source=secret\n</code></pre> <p>A little note here: the above tutorial provides different pathways to get a certificate. I am using ingress.tls.source=secret because I am just running on my local sytstem. In production you probably want to use a different option. Also I reduced replicas to 1 since I only have 1 pod in my local test environment.</p> <p>After running, I got a nice message saying rancher is setting itself up:</p> <p>NAME: rancher LAST DEPLOYED: Sun Apr 24 11:25:45 2022 NAMESPACE: cattle-system STATUS: deployed REVISION: 1 TEST SUITE: None NOTES:</p> <p>Rancher Server has been installed.</p> <p>NOTE: Rancher may take several minutes to fully initialize. Please standby while Certificates are being issued, Containers are started and the Ingress rule comes up.</p> <p>Check out our docs at https://rancher.com/docs/</p> <p>If you provided your own bootstrap password during installation, browse to https://crest to get started.</p> <p>If this is the first time you installed Rancher, get started by running this command and clicking the URL it generates:</p> <p>echo https://crest/dashboard/?setup=$(kubectl get secret --namespace cattle-system bootstrap-secret -o go-template='{{.data.bootstrapPassword|base64decode}}')</p> <p>To get just the bootstrap password on its own, run:</p> <p>kubectl get secret --namespace cattle-system bootstrap-secret -o go-template='{{.data.bootstrapPassword|base64decode}}{{ \"\\n\" }}'</p> <p>Happy Containering! ```</p> <p>Let's use our experience from the simple nginx deployment to see what is running on the system now:</p> <pre><code>kubectl get pods -A\n</code></pre> <p>NAMESPACE                   NAME                                      READY   STATUS              RESTARTS      AGE kube-system                 helm-install-traefik-crd--1-xrhvf         0/1     Completed           0             13h kube-system                 helm-install-traefik--1-m2r2x             0/1     Completed           1             13h kube-system                 svclb-traefik-p9zwj                       2/2     Running             2 (10m ago)   13h kube-system                 local-path-provisioner-84bb864455-dsv47   1/1     Running             1 (10m ago)   13h kube-system                 coredns-96cc4f57d-5bzj8                   1/1     Running             1 (10m ago)   13h tim                         nginxpod                                  1/1     Running             1 (10m ago)   11h default                     nginx-6799fc88d8-7k4kd                    1/1     Running             1 (10m ago)   12h kube-system                 traefik-56c4b88c4b-mpwfm                  1/1     Running             1 (10m ago)   13h kube-system                 metrics-server-ff9dbcb6c-6gzt5            1/1     Running             1 (10m ago)   13h cattle-system               rancher-6448c4dcdf-8wpsk                  1/1     Running             0             3m37s cattle-fleet-system         gitjob-cc9948fd7-jxgg5                    1/1     Running             0             44s cattle-fleet-system         fleet-controller-5746685958-f4rx5         1/1     Running             0             44s cattle-system               helm-operation-zfbfq                      0/2     Completed           0             68s cattle-system               helm-operation-5sg9s                      0/2     Completed           0             16s cattle-system               helm-operation-n6ggh                      2/2     Running             0             10s cattle-fleet-local-system   fleet-agent-6c6c8c45f8-vtbnm              0/1     ContainerCreating   0             7s cattle-system               rancher-webhook-6958cfcddf-z9rxr          0/1     ContainerCreating   0             5s</p> <p>We can see various jobs are still spinning up in the cattle-system.</p> <p>Next I went on a little detour on creating a self signed certificate that I can install in my rancher instance.</p> <pre><code>openssl req -new -newkey rsa:4096 -x509 -sha256 -days 365 \\\n-nodes -out tls.crt -keyout tls.key\n</code></pre> <p>Note: I believe it is required to name the key tls.* so as to match the secret name.</p> <p>Which outputs this:</p> <p>Generating a RSA private key writing new private key to 'tls.key' You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. Country Name (2 letter code) [XX]:pt State or Province Name (full name) []: Locality Name (eg, city) [Default City]: Organization Name (eg, company) [Default Company Ltd]: Organizational Unit Name (eg, section) []: Common Name (eg, your name or your server's hostname) []: Email Address []:tim@kartoza.com </p> <p>Then we have two certs in our directory:</p> <pre><code>ls\n</code></pre> <p>tls.crt  tls.key  nginx.yml</p> <p>Then on this rancher page, I followed these notes to install my cert:</p> <pre><code>kubectl -n cattle-system create secret tls tls-rancher-ingress \\\n--cert=tls.crt \\\n--key=tls.key\nsecret/tls-rancher-ingress created\n</code></pre> <p>Ok then back to the main thread of the rancher installation tutorial I continued:</p> <pre><code>kubectl -n cattle-system rollout status deploy/rancher\n</code></pre> <p>Which returns this:</p> <p>deployment \"rancher\" successfully rolled out</p>"},{"location":"devops/infrastructure/personal_infrastructure/#testing-it-out","title":"Testing it out","text":"<p>The instructions say to open the host in your browser (in my case I used my local hostname of crest), but nothing opened.</p> <p>I took a look in rancher desktop and played with the port forwarding. The default install looked like this:</p> <p></p> <p>So I went ahead and tried to forward that rancher port:</p> <p></p> <p>Then tried to open https://localhost:37443/</p> <p>Which gave me an error:</p> <p></p> <p>The thing seems to be that you need to rather forward this port:</p> <p></p> <p>Then I was able ot open the site (different port number now) an set up my credentials following the hints provided.</p> <p>Note: Since I am using a self signed cert I had to do the normal firefox security warning process to proceed to the site.</p> <p></p> <p>I did however still have some errors now showing in rancher:</p> <p></p>"},{"location":"devops/infrastructure/personal_infrastructure/#deploying-a-small-application-from-a-helm-chart","title":"Deploying a small application from a helm chart","text":"<p>I know helm charts are like the package managers of kubernetes, but I am not familiar with them, so I went to make a small test with the filebrowser.org (awesome app btw). I found these instructions and so ran and deployed it like this:</p> <pre><code>helm repo add utkuozdemir https://utkuozdemir.org/helm-charts\nhelm install my-release utkuozdemir/filebrowser\nexport POD_NAME=$(kubectl get pods kubernetes.io/name=filebrowser,app.ease\" -o jsonpath=\"{.items[0].metadata.name}\nexport CONTAINER_PORT=$(kubectl get pod E -o jsonpath=\"{.spec.containers0].ports[0]. \necho \"Visit http://127.0.0.1:8080 to use kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT\n</code></pre> <p>From this I learned a couple of things:</p> <ol> <li>We can pull helm charts from the internet with a system of repos</li> <li>We can use xpath style queries to parse out bits of info from kubectl</li> <li>The last line gives some hints about how to foward traffic out of k8</li> </ol>"},{"location":"devops/infrastructure/rancher-k3s-single-node/","title":"Using Rancher, K3S, and Longhorn for single node Kubernetes deployment","text":"<p>Prerequisites: This process assumes the use of a clean Ubuntu 20.04 server with a public IP address and an authorized key recognised by the server in the current users ~/.ssh.</p>"},{"location":"devops/infrastructure/rancher-k3s-single-node/#rancher-deployment-process","title":"Rancher Deployment Process","text":"<p>Get the docker-ansible project to run an ansible controller in a docker container</p> <pre><code>user@dev$ git clone https://github.com/kartoza/docker-ansible.git\n</code></pre> <p>Build the container image</p> <pre><code>user@dev$ cd docker-ansible\n</code></pre> <pre><code>user@dev$ docker build . -t ansible\n</code></pre> <p>Replace the remote IP address in the inventory file</p> <pre><code>user@dev$ echo \"&lt;server-ip&gt; ansible_user=root ansible_private_key_file=/root/.ssh/id_ed25519\" &gt; ${PWD}/ansible/inventory/hosts.ini\n</code></pre> <p>Remove the default playbooks directory</p> <pre><code>user@dev$ rm -r ./ansible/playbooks\n</code></pre> <p>Fetch the playbook repository which includes the singlenode rancher deployment</p> <pre><code>user@dev$ cd ./ansible &amp;&amp; git clone https://github.com/kartoza/playbooks.git\n</code></pre> <p>Go back to the repository root</p> <pre><code>user@dev$ cd /..\n</code></pre> <p>Run the docker container (Powershell/ Windows users should read the docker-ansible readme)</p> <pre><code>user@dev$ docker run -dt -v $PWD/ansible:/ansible \\\n-v ~/.ssh:/root/win-ssh:ro \\\n-e ANSIBLE_CONFIG=/ansible/ansible.cfg \\\n--restart=unless-stopped \\\n--name ansible ansible\n</code></pre> <p>Once the container is running run the playbook</p> <pre><code>user@dev$ docker exec -it ansible ansible-playbook /ansible/playbooks/ubuntu20.04/app/rancher-singlenode.yaml\n</code></pre> <p>Save the logs and kill off the ansible container</p> <pre><code>user@dev$ docker logs ansible &gt;&gt; $PWD/ansible_log.txt &amp;&amp; docker rm -f ansible\n</code></pre> <p>At this point, the server should be configured to use <code>https://rancher.&lt;server-ip&gt;.sslip.io</code>. By default the admin user is <code>admin</code> and the password is <code>chickensoup</code> but that can be changed in the <code>rancher-singlenode.yaml</code> file. Note self-signed TLS is enabled so there'll be browser notices, but TLS configuration is environment specific and not considered in the scope of this process definition.</p>"},{"location":"devops/infrastructure/rancher-k3s-single-node/#application-deployment-process","title":"Application Deployment Process","text":"<p>Now the project workload will need to be deployed to the server. This will use kubectl and can be done in various ways. If you wish to deploy from the local machine, the kubectl configuration for each node should be available in the <code>ansible/data</code> directory.</p> <p>For the purpose of demonstrating this process, it is assumed that this is done by using ssh to connect to the server as the root user, which should have the kubectl configuration already setup by the ansible deployment.</p> <pre><code>user@dev$ ssh root@&lt;server-ip&gt;\n</code></pre> <p>Clone the project repository</p> <pre><code>root@app-srv$ mkdir /manifests &amp;&amp; cd /manifests &amp;&amp; git clone https://gitlab.com/zacharlie/test-manifest.git\n</code></pre> <p>Replace the hostname field in the ingress with the fully qualified domain name of the server.</p> <pre><code>root@app-srv$ cp /manifests/test-manifest/ingress.yaml /manifests/test-manifest/ingress.yaml.bak &amp;&amp; awk '/nginx.test.localhost/ {sub(\"nginx.test.localhost\", \"123.456.7.89.sslip.io\", $0)} {print}' /manifests/test-manifest/ingress.yaml.bak &gt; /manifests/test-manifest/ingress.yaml\n</code></pre> <p>Apply the project resources using kustomize</p> <pre><code>root@app-srv$ cd /manifests/test-manifest &amp;&amp; kubectl apply -k .\n</code></pre> <p>Be patient and monitor the resources from the nifty rancher dashboard (Workload &gt;&gt; Pods is a good place to start). Once everything is running you may view the landing page at the hostname address that was configured within the ingress configuration.</p> <p></p>"},{"location":"devops/procedures/","title":"DevOps Procedures","text":"<p>DevOps tasks are handled by the DevOps board</p>"},{"location":"devops/security/","title":"Security","text":"<ul> <li>Cyber Hygiene Handbook</li> <li>Security Guidelines/ Rules</li> <li>Development Processes</li> <li>External Resources</li> </ul>"},{"location":"devops/security/#cyber-hygiene-handbook","title":"Cyber Hygiene Handbook","text":"<p>'twould be handy to collect resources and advice on training users in best practices for cyber-hygiene (applies in broad strokes to staff, trainees, community, and more). Compiled into a nice concise resource with pretty pictures and minimal complexity++</p> <p>Topics and structure could be outlined as follows:</p> <p>Users:</p> <ul> <li>Identifying phishing attacks</li> <li>Credential management</li> </ul> <p>Admins:</p> <ul> <li>Identifying whats on the network</li> <li>Account management</li> <li>Staying up to date</li> </ul> <p>Developers:</p> <ul> <li>Authentication management</li> <li>Dependency management</li> <li>Scanning</li> <li>SSH, SSL, SSO (lots of SS), Cryptography, Hashes, Salts</li> </ul>"},{"location":"devops/security/links/","title":"Security: Useful Links","text":"<p>A bunch of useful external resources related to security.</p>"},{"location":"devops/security/links/#articles","title":"Articles","text":"<ul> <li>https://security-list.js.org/#/</li> <li>https://www.sentinelone.com/blog/practice-these-10-basic-cyber-hygiene-tips-for-risk-mitigation/</li> </ul>"},{"location":"devops/security/links/#tools","title":"Tools","text":"<p>Projects which are good for security.</p> <ul> <li>https://keepass.info/</li> <li>https://bitwarden.com/</li> <li>https://pypi.org/project/xkcd-pass/</li> <li>https://snyk.io/</li> <li>https://docs.docker.com/engine/scan/</li> <li>https://github.com/trailofbits/pip-audit</li> <li>https://github.com/trufflesecurity/trufflehog</li> <li>https://github.com/danielmiessler/SecLists</li> </ul>"},{"location":"gis/","title":"GIS","text":"<p>Resources, information, and processes related to Geographic Information Systems</p> <p>Note that all users, regardless of role, should understand and review the security section.</p> <p>GIS is a core competency at Kartoza. All technical staff should endeavour to ensure that they have or develop some level of proficiency in GIS.</p> <ul> <li>Cartography</li> <li>Technologies</li> <li>Resources</li> </ul>"},{"location":"gis/cartography/","title":"Cartography","text":"<p>Guidelines on how to create effective cartography.</p> <p>Information on the development of cartographic style guides.</p>"},{"location":"gis/cartography/cartography-guidelines/","title":"Cartography Guidelines","text":"<p>This section is a collection of rules and mantras used by Kartoza to make beautiful and effective cartography.</p>"},{"location":"gis/cartography/cartography-guidelines/#tims-three-principles","title":"Tim's three principles","text":"<p>In the above image we can see a framework for you to use to develop your cartography skills. There are three principles you should understand in order to make great cartographic products. The principles are an adaptable construct designed to help you make maps which respect your user's intelligence and surprise, excite and delight them.</p> <ol> <li>Process: This is definition of a standardised, rigorous set of steps that should be followed by for yourself and / or your co-workers to adhere to when developing your product. Process is the unexciting stuff that happens in the background. Your process should be defined as a nest list of statements. The best way to explain is by an example:<ol> <li>All map fonts should be at least or larger than 6pt.</li> <li>All map symbols should be at least or larger than 3mm.</li> <li>All third party map symbols should be available and published under an open license.</li> <li>.... etc. .... The development of the process is to have the creation of your map repeatable from one end to another, and to be able to work collaboratively with colleages in a consistent way.</li> </ol> </li> <li>Technical Skill: This is the process whereby you learn the capabilities of the software (e.g. QGIS) as thorough as possible in order to be able to articulate any idea you or others may have as a cartographic expression. Technical skill is a process of continual learning and acquiring it should commence with the development of a high level framework of the cartographic system and then progress with a deeper and deeper understanding of all of the constituent parts.</li> <li>Creativity: This is the hardest (and sometimes impossible) to imbue in a cartographer. When you lack personal creativity to come up with great map designs, you should (ethically) build on the work of others through emulation. By ethically we mean, crediting the inspiration of your designs to the correct person, asking permission when needed, and being sensitive to the livelihood and reputation for whoever you derive your work from. When you do have a creative side, you should be using it to inform the process and learning of technical skills so that you can articulate your vision in the cartography you produces.</li> </ol> <p>We should stress that all rules you or others create can be broken if they are broken with intention. That is to say, if you decide a 3 point font symbol is critical for the artistic or technical vision, you should not be afraid to make such a decision. What we want to avoid is unintentional breaking of your own rules as it will lead to a less professional looking product.</p> <p>The relative size of your circles for process versus creative versus technical abilities will likely differ widelines. Your job is to strive in your personal journey as a cartographer to bring them into good proportion and to grow the areas which are under developed. There is a lot of theory out there on cartographic design, but I really recommend reading this wikipedia page: https://en.wikipedia.org/wiki/Cartographic_design and also reading the QGIS Map Design book by Anita Graser and Gretchen Peterson (available at https://locatepress.com/book/qmd2). .</p>"},{"location":"gis/cartography/cartography-guidelines/#cartographic-map-design","title":"Cartographic Map Design","text":""},{"location":"gis/cartography/cartography-guidelines/#reference--cartography-n-map-design","title":"Reference : Cartography n Map Design","text":"<p>Definition. Cartographic design or map design is the process of crafting the appearance of a map, applying the principles of design and knowledge of how maps are used to create a map that has both aesthetic appeal and practical function. It shares this dual goal with almost all forms of design; it also shares with other design, especially graphic design, the three skill sets of artistic talent, scientific reasoning, and technology. As a discipline, it integrates design, geography, and geographic information science.</p>"},{"location":"gis/cartography/cartography-guidelines/#types-of-maps","title":"Types of Maps","text":"<p>According to the ICSM (Intergovernmental Committee on Surveying and Mapping), there are five different types of maps namely: General Reference, Topographical, Thematic, Navigation Charts and Cadastral Maps and Plans.</p>"},{"location":"gis/cartography/cartography-guidelines/#the-cartographic-design-process","title":"The Cartographic Design Process","text":"<p>As map production and reproduction technology has advanced, the process of designing and producing maps has changed considerably. Most notably, GIS and graphics software not only makes it easier and faster to create a map, but it facilitates a non-linear editing process that is more flexible than in the days of manual cartography. There is still a general procedure that cartographers generally follow:</p> <ol> <li>Planning: Typically, this involves answering several questions:</li> </ol> Question Answer What is the purpose of the map? Maps serve a wide variety of purposes; they may be descriptive (showing the accurate location of geographic features to be used in a variety of ways, like a street map), exploratory (showing the distribution of phenomena and their properties, to look for underlying patterns and processes, like many thematic maps), explanatory (educating the audience about a specific topic), or even rhetorical (trying to convince the audience to believe or do something). Who is the audience? Maps will be more useful if they cater to the intended audience. This audience could range from the cartographer herself (desiring to learn about a topic by mapping it), to focused individuals or groups, to the general public. Several characteristics of the audience can aid this process, if they can be determined, such as: their level of knowledge about the subject matter and the region being covered; their skill in map reading and understanding of geographic principles (e.g., do they know what 1:100,000 means?); and their needs, motivations and biases. Is a map the best solution? There are times when a map could be made, but a chart, photograph, text, or other tool may better serve the purpose. What datasets are needed? The typical map will require data to serve several roles, including information about the primary purpose, as well as supporting background information. What medium should be used? Different mapping media, such as posters, brochures, folded maps, page maps, screen displays, and web maps have advantages and disadvantages for different purposes, audiences, and usage contexts. <ol> <li> <p>Data Collection: In the era of Geographic information systems, it seems like vast amounts of data are available for every conceivable topic, but they must be found and obtained. Frequently, available datasets are not perfect matches for the needs of the project at hand, and must be augmented or edited. Also, it is still common for there to be no available data on the specific topic, requiring the cartographer to create them, or derive them from existing data using GIS tools.</p> </li> <li> <p>Design and Implementation: This step involves making decisions about all of the aspects of map design, as listed below, and implementing them using computer software. In the manual drafting era, this was a very linear process of careful decision making, in which some aspects needed to be implemented before others (often, projection first). However, current GIS and graphics software enables interactive editing of all of these aspects interchangeably, leading to a non-linear, iterative process of experimentation, evaluation, and refinement.</p> </li> <li> <p>Production and Distribution: The last step is to produce the map in the chosen medium, and distribute it to the audience. This could be as simple as a desktop printer, or sending it to a press, or developing an interactive Web Mapping Site.</p> </li> </ol>"},{"location":"gis/cartography/cartography-guidelines/#design-goals","title":"Design Goals","text":"<p>While maps serve a variety of purposes, and come in a variety of styles, most designs share common goals. Some of the most commonly stated include:</p> Goal Description Accuracy, the degree to which the information on the map corresponds to the nature of the real world. Traditionally, this was the primary determinant of quality cartography. It is now accepted, due largely to studies in Critical Cartography, that no dataset or map is a perfect reproduction of reality, and that the subjective biases and motivations of the cartographer are virtually impossible to circumvent. That said, maps can still be crafted to be as accurate as possible, honest about their shortcomings, and leverage their subjectivity. Functionality, the usefulness of the map to achieve its purpose. During much of the latter 20th century, this was the primary goal of academic cartography, especially the Cartographic Communication school of thought: to determine how to make the most efficient maps as conduits of information. Clarity, the degree to which the map makes its purpose obvious and its information easy to access. Clarity can be achieved through removing all but the most important information, but this comes at the expense of other goals. Richness, the volume and diversity of information the reader can glean from the map. Even maps with a narrowly-defined purpose often require the reader to see patterns in large amounts of data. Aesthetic appeal, a positive emotional reaction to the overall appearance of the map. Maps may be appreciated as \"beautiful,\" but other positive affects include \"interesting,\" \"engaging,\" \"convincing,\" and \"motivating.\" Aesthetic reactions can be negative as well, such as \"ugly,\" \"cluttered,\" \"confusing,\" \"complicated,\" \"annoying,\" or \"off-putting.\" <p>These goals often seem to be in conflict, and it may be tempting to prioritize one over the others. However, quality design in cartography, as in any other design field, is about finding creative and innovative solutions to achieve multiple goals. According to Edward Tufte,</p> <p>What is to be sought in designs for the display of information is the clear portrayal of complexity. Not the complication of the simple; rather the task of the designer is to give visual access to the subtle and the difficult--that is, the revelation of the complex.</p> <p>In fact, good design can produce synergistic results. Even aesthetics can have practical value: potential map users are more likely to pick up, and more likely to spend time with, a beautiful map than one that is difficult to look at. In turn, the practical value of maps has gained aesthetic appeal, favoring those that exude a feeling of being \"professional,\" \"authoritative,\" \"well-crafted,\" \"clear,\" or \"informative.\" In 1942, cartographer John K. Wright said,</p> <p>An ugly map, with crude colors, careless line work, and disagreeable, poorly arranged lettering may be intrinsically as accurate as a beautiful map, but it is less likely to inspire confidence.</p> <p>Rudolf Arnheim, an art theorist, said this about the relationship between maps and aesthetics in 1976:</p> <p>The aesthetic or artistic qualities of maps are sometimes thought to be simply matters of so-called good taste, of harmonious color schemes and sensory appeal. In my opinion, those are secondary concerns. The principal task of the artist, be he a painter or a map designer, consists of translating the relevant aspects of the message into the expressive qualities of the medium in such a way that the information comes across as a direct impact of perceptual forces. This distinguishes the mere transmission of facts from the arousal of meaningful experience.</p> <p>More recently, cartographers have recognised the central role of aesthetics in cartographic design and called for greater focus on how this role functions over time and space. For example, in 2005, Dr Alex Kent (former President of the British Cartographic Society) recommended:</p> <p>It will thus be more useful to cartographers and the development of cartography in general to undertake further research towards understanding the role of aesthetics in cartography than to pursue universal principles. Some possible topics for investigation include:</p> <ol> <li>A history of the development of aesthetics in cartography;</li> <li>An exploration of geographical variations in cartographic aesthetics; and</li> <li>A critical examination of the factors influencing aesthetic decisions in contemporary mapmaking. </li> </ol>"},{"location":"gis/cartography/cartography-guidelines/#steps-to-preparing-a-map","title":"Steps to preparing a map","text":"<ol> <li>Choose your locality. Perhaps you have a client or an assignment which will determine the place. Or perhaps you have the freedom to choose the place yourself.</li> <li>Choose the scale for your map. Again this may be client driven based on a specification or you might have the freedom to choose yourself. But decide upfront what scale you will view the map at as it will influence all your decisions as you develop your map. In some cases you may be asked to make a variable scale product e.g. for a web map that can be zoomed in and out. If you are producing a variable scale map, determine which scale ranges and intervals will be used. For example, OpenStreetMap defines standard scale intervals which are used by many web mapping toolkits. If you are able to choose your own scale, try to choose a humanistic scale e.g. 1:500000, 1:5000 etc.</li> <li>Assuming you are preparing a fixed scale map, define the extent of your map. This may be determined by the print page size or by client factors. In some cases, the size of the print medium may influence the scale of your map. For example, you may be printing to an A4 map and need to choose a scale that allows you to see the whole town or area of interest.</li> <li>Determine which data layers to feature in your map. Some typical examples will be roads, buildings, rivers, water bodies, points of interest etc. Make a list and then go out and procure your data. For each dataset your find, keep note of the following details in a spreadsheet or notes file:<ol> <li>Date of download</li> <li>Source (name of person or organisation)</li> <li>Attribution (citation for the data)</li> <li>URL</li> <li>Notes</li> </ol> </li> <li>Determine the purpose of your map. Every map has a story to tell. Maybe you want to show a tourist around your city? Perhaps it is a narrative about crime or socio-economics. Try to create a short narrative like you were telling a friend about visiting the place in your map to create a sense of 'feel' about the place.</li> <li>Plan your colour palette. Overwhelming your reader with many, jarring colours won't help them to interpret your map well, not will it make for an aesthetically pleasing experience. If you are not good at working with colours, find a photo of a key feature of the area and lift colours out of the image until you have about 8 to 10 colours of different hues and intensities. Or check out one of the many online sites like coolors.co .</li> <li>Choose a style. There are many amazing cartographic styles out there. Do you want something technical? Cartoony? Medieval looking? Find an example of a similar style to what you have in mind and look at what visual elements they use to cartography style.  - Medieval Mappa Mundi map from the 1300s (source - Wikipedia)</li> <li>Plan your layout. If you are making a print map, it can be useful to roughly plan where all the elements such as map, legend, photos or graphics e.t.c. will appear on your layout. That will influence some decisions in your cartography and will help you to organise your work plan.</li> <li>Create a set of guidelines. Create some rules for yourself to follow. Life gets a lot easier when you have a framework to construct your work on than when you are just 'winging it'.</li> <li>Use the QGIS QuickOSM Plugin to quickly establish a baseline set of layers for your map. .</li> </ol>"},{"location":"gis/cartography/cartography-guidelines/#map-layout","title":"Map Layout","text":"<p>A typical map, whether on paper or on a web page, consists of not only the map image, but also other elements that support the map:</p> <p>A title tells the reader what the map is about, including the purpose or theme, and perhaps the region covered. A legend or key explains the meaning of the symbols on the map A neatline may frames the entire map image, although many maps use negative space to set the map apart A compass rose or north arrow provides orientation Inset maps may serve several purposes, such as showing the context of the main map in a larger area, showing more detail for a subset of the main map, showing a separated but related area, or showing related themes for the same region. A bar scale or other indication of scale translates between map measurements and real distances. Illustrations may be included to help explain the map subject or add aesthetic appeal. Explanatory text may discuss the subject further Metadata declares the sources, date, authorship, projection, or other information about the construction of the map.</p> <p>Composing and arranging all of the elements on the page involves just as much design skill and knowledge of how readers will use the map as designing the map image itself. Page composition serves several purposes, including directing the reader's attention, establishing a particular aesthetic feel, clearly stating the purpose of the map, and making the map easier to understand and use. Therefore, Page layout follows many of the same principles of Composition above, including figure-ground and Visual hierarchy, as well as aesthetic principles adopted from Graphic design, such as balance and the use of White space (visual arts). In fact, this aspect of cartographic design has more in common with graphic design than any other part of the craft.</p>"},{"location":"gis/cartography/cartography-guidelines/#mantras","title":"Mantras","text":"<ol> <li>The user should not be exposed to the inner workings of the system. Which is guideline we try to avoid asking the user to perform activities that presume or require that they have inside knowledge of how the system works. Where breaking this guideline is unavoidable, such tasks should be well described so as to allow the user to carry out the task with the least possible friction.</li> <li>If you use somebody else's work, they should be attributed unless they do not require it.</li> <li>Get peer review of your work early and often.</li> <li>Keep to the topic of your creation.</li> <li>Speak to your audience. Think of your work from the user's point of view and create something they can relate to.</li> <li>Follow the principle of separation of concerns. Users should have a clear understanding of where they are in a workflow, being presented with information which is thematic to the task at hand, whilst non-relevant questions or information should be hidden.</li> <li>Use emphasis sparingly. If everything is emphasised, nothing is emphasised! Some things that provide emphasis are .</li> <li>Layout visual elements in a consistent way in terms of size, colour and spacing. Break this rule with intention. .</li> <li>Tell a story!</li> <li>Make sure the user understands why they are here.</li> <li>Explicit is better than implicit. Don't assume your users know about simple things like north direction etc.</li> <li>Design the system to be easy to maintain. In this case, the map should avoid introducing unneeded functionality, using unneeded infrastructure, include obfuscated or overly complex terms or visual imagery. To achieve this, we should strive for simplicity and clarity in the user experience.</li> <li>Don't present data, present insights.</li> <li>Pay extreme attention to detail to create a professional product.</li> <li>Reduce reduce reduce - prune the content until it has the minimum number of elements needed to convey your message.</li> <li>Make rules for yourself and follow them closely. Break your rules with intention. Create a consistent visual and interactive metaphor and using it throughout the system if possible.</li> <li>\"Obey the principle of least surprise\". Design to reduce cognitive friction.</li> <li>Surpise and delight your user.</li> <li>There is no such thing as cheating, only finding creative solutions to your problems.</li> <li>Whenever possible, do things for the user.</li> </ol>"},{"location":"gis/cartography/cartography-guidelines/#choosing-a-coordinate-reference-system-for-your-map","title":"Choosing a Coordinate Reference System for your map","text":"<p>The order of preference for selection of a CRS for your map should be determined by the intended purpose and by client requirements:</p> Scale CRS Type CRS Notes Global Spherical IAU_2015:39965 Orthographic   Use for inset maps or contextual maps. Create a customised CRS based on this to move the LO origin. Global Cylindrical EPSG:8857 Equal Earth  Use for flat maps of the world. Represents country sizes fairly. See The Equal Earth Website. Any Spherical EPSG:3857 Spherical  Use for maps destined for the web or that incorporate data from online sources like MapTiler or OSM tiles. Regional Conic EPSG:102024 Lambert  Use for maps covering a large East-West area. For example spanning 3 or 4 UTM zones. Local Mercator EPSG:32XXXX UTM  Use for maps covering small, local areas. For example spanning  1 or less UTM zones."},{"location":"gis/cartography/cartography-guidelines/#cartography-resources","title":"Cartography Resources","text":"Name Description Oxford AI Textures Use for raster fill textures. License unknown. QGIS Styles A collection of re-usable QGIS styles you can use to level up your cartography and learn how to produce interesting cartography. QGIS Example Projects A collection of QGIS projects which provide reference examples of how different GIS workflows in QGIS. QGIS Example Processing Models A collection of processing models which solve different geospatial analysis problems. QGIS Example 3D Models A collection of 3d Objects you can use as point symbol markers for your 3D Scenes. QGIS .lyr Files A collection of QGIS .lyr files with useful datasets that you can add to your QGIS projects. Google Fonts A large collection of fonts you can use in your projects. We also deploy these fonts in OSGS too so if you make a web map they will be available there. GNU Fonts Another large set of free fonts you can use in your project."},{"location":"gis/cartography/cartography-guidelines/#common-issues-in-cartography","title":"Common issues in cartography","text":"No. Image Description 1 Don't let labels overlap features. 2 Make sure that major roads cover minor roads. 3 1\ufe0f\u20e3 Set your canvas scale to the scale you plan to print at and 2\ufe0f\u20e3 lock it. When you 3\ufe0f\u20e3 zoom in and out with your scroll wheel it will zoom into pixels at the fixed scale. 4 Don't include roads on your map that end abruptly unless this indeed reflects reality. 5 Generally you should use a round cap style for your roads to avoid issues of the road cap extending beyond intersecting roads. 6 As a general rule, points should be drawn above polygon and line features. 7 Use a font that matches the language of your map. 8 Use symbol layers to place a solid background behind symbols which are transparent and are getting lost in the background. 9 Do not use transparency inappropriately. Features like dams should be usually rendered with a solid fill. 10 Avoid visual clutter in your map. If there are too many features visible with similar contrast  your user will quickly become overwhelmed. 11 Avoid overlapping features that don't naturally overlap. 12 Use layer symbol levels for multilayer symbols to prevent elements of the style overlapping. 13 Don't use legend items that are not meaningful. 14 Use call out labels when they risk covering important features on the map. 15 Don't let line or polygon features obscure point symbols. 16 Make sure the sizes of components on your map are balanced. 17 Avoid side effects of using transparent colours. 18 Always run your text through a spelling and grammar checker. 19 Have someone else read your prose to ensure the phrasing is clear and easy to read. 20 Learn how to split legend columns to create a sense of balance in your composition. 21 Don't use light colours on a dark background, dark colours on a dark background. 22 Humanize all text shown to users (see mantra about exposing users to inner workings of the system). 23 Set up your rendering options so that your symbols are not partially drawn / clipped - unless this is by design. 24 Avoid having labels obscure the features they are labelling. 25 Make sure all elements are aligned with pixel perfect precision. 26 Ensure white space between elements is the same to create a sense of perfect symmetry. Using a layout grid can help a lot with this. 27 Avoid repeating labels on the same line segment unless it is by intention. 28 Where relevant, provide context at the edges of your map so the user understands where they will go if they leave the map."},{"location":"gis/resources/","title":"GIS Resources","text":"<p>Where to find internal resource collections (projects, templates, data, assets etc)</p> <p>External resource links:</p> Resource About GeoSeer A spatial data search engine with datasets made available via standards compliant geospatial web services DIVA-GIS A popular free spatial data store with datasets for the whole world. Also a program for geographic data analysis and mapping."},{"location":"gis/technologies/","title":"Technologies","text":"<p>Outline of Key GIS Technologies that all GIS practitioners should be familiar with.</p> <p>Outline GIS technologies and concepts for developers to get up to speed quickly.</p>"},{"location":"library/","title":"Resources","text":"<ul> <li>Cheatsheets</li> <li>External Resources</li> <li>Kartoza Media Center</li> <li>Tutorials</li> </ul>"},{"location":"library/cheatsheets/","title":"Cheatsheets","text":"<p>This article is under heavy development and is not considered production ready</p> <p>Cheatsheets and snippets for important and common operations.</p> <ul> <li>PostgreSQL</li> <li>BASH</li> <li>Kubectl</li> <li>OSGeo4W</li> </ul>"},{"location":"library/cheatsheets/bash/","title":"Bash","text":"<p>This article is under heavy development and is not considered production ready</p> <p>A shell is a computer program which exposes an operating system's services to a human user or other programs. The Bourne Again SHell (BASH) is a command-line interpreter that is commonly found in many UNIX based Operating Systems, and the term \"bash-scripting\" has become synonymous with the execution of UNIX commands.</p>"},{"location":"library/cheatsheets/bash/#busybox","title":"BusyBox","text":"<p>BusyBox is a software suite that provides several Unix utilities in a single executable file. Where bash provides a way for commands to be executed, BusyBox provides access to the commands themselves. BusyBox is probably the minimal toolset you can expect to find on UNIX systems and is commonly found on everything from workstations to servers to IoT devices. Many fan-favorite commands, such as <code>cat</code>, <code>ls</code>, <code>top</code>, <code>grep</code>, <code>awk</code>, <code>mount</code>, and more are actually made available by the BusyBox installation.</p> <pre><code>/bin/busybox --list-full\n</code></pre> <p>Other system commands vary from installation to installation, so the more you can achieve with the BusyBox tools and no external dependencies, the more robust your scripts will be.</p>"},{"location":"library/cheatsheets/bash/#executing-scripts","title":"Executing Scripts","text":"<p>A script is a file that contains a sequence of commands that are executed by the shell. To run those commands it must be made executable.</p> <pre><code>chmod +x /path/to/my-script.sh\n</code></pre> <p>For the system to know what software an executable file must be run with, a shebang is used at the top of the file</p> <pre><code>#!/bin/bash\n</code></pre>"},{"location":"library/cheatsheets/kubectl/","title":"Kubectl","text":"<p>This article is under heavy development and is not considered production ready</p> <p>Kubectl (Kubernetes Control) is a commandline utility for managing Kubernetes clusters.</p>"},{"location":"library/cheatsheets/kubectl/#kustomize","title":"Kustomize","text":"<p>Kustomize is a utility for building and \"patching\" complete resource definitions from a subset of information, allowing .</p> <p>There are a lot of declarative items within a set of Kubernetes resources that may be consistent and repeating these definitions would become rather redundant. An example would be all the resources in the project requiring the inclusion of the namespace element in the resource metadata.</p> <p>Not only is this redundancy inefficient to manage and control, but it also violates DRY principles that ensure our components are managed consistently and to prevent errors.</p>"},{"location":"library/cheatsheets/kubectl/#common-operations","title":"Common operations","text":"<p>To validate the current resource configurations, run <code>kubectl kustomize</code>, or pipe the output to a file with <code>kubectl kustomize &gt; output.yaml</code> to create a single file with a complete set of the resource definitions available within the current directory.</p> <p>Apply the current directories manifests using kustomize with <code>kubectl apply -k .</code>, with <code>.</code> being the current directory and using a <code>kustomize.yaml</code> file to define the resources to apply.</p> <p>Use <code>kubectl -n my-namespace get pods</code> to list the pods in the <code>my-namespace</code> namespace.</p> <p>This is useful when you want to find a pod by name, so that you can execute the command directly against a pod that forms a particular service. You would have to be careful with your deployments naming conventions to avoid collisions, but it can be super handy to enhance your automation capabilities.</p> <pre><code>$ nginx_pod=$(kubectl -n my-namespace get pods | awk '{print $1}' | grep -m 1 -e \"nginx\") &amp;&amp; \\\necho $nginx_pod\n</code></pre> <p>If you're a sucker for punishment, you can accomplish a similar result with powershell.</p> <pre><code>&gt; $nginx_pod = (kubectl -n my-namespace get pods |  Select-String -Pattern \"nginx\" -SimpleMatch | select -first 1 | %{ ($_ -split \"\\s+\")[0]})\n&gt; Write-Output $nginx_pod\n</code></pre> <p>This makes it trivial to copy data into a volume with kubectl</p> <pre><code>nginx_pod=$(kubectl -n my-namespace get pods | awk '{print $1}' | grep -m 1 -e \"nginx\") &amp;&amp; \\\nkubectl -n my-namespace cp ./configs/web/index.html $nginx_pod:/web/index.html\n</code></pre> <p>Or execute commands such as a mapproxy cleanup</p> <pre><code>mapproxy_pod=$(kubectl -n my-namespace get pods | awk '{print $1}' | grep -m 1 -e \"mapproxy\") &amp;&amp; \\\nkubectl -n my-namespace exec $mapproxy_pod -- /bin/bash -c \"mapproxy-seed -s /mapproxy/seed.yaml -f /mapproxy/mapproxy.yaml -c 4 --cleanup=remove_complete_levels\"\n</code></pre> <p>Or run the command in the background within the pod, such as a mapproxy seeding operation</p> <pre><code>mapproxy_pod=$(kubectl -n my-namespace get pods | awk '{print $1}' | grep -m 1 -e \"mapproxy\") &amp;&amp; \\\nkubectl -n my-namespace exec $mapproxy_pod -- /bin/bash -c \"mapproxy-seed -s /mapproxy/seed.yaml -f /mapproxy/mapproxy.yaml -c 4 &gt; /dev/null 2&gt; /dev/null &amp;\"\n</code></pre>"},{"location":"library/cheatsheets/kubectl/#helm","title":"Helm","text":"<p>Helm is a Kubernetes Native package manager that provides more complex management capabilities for k8s resources. Helm is a separate application from kubectl that must be installed on a system with access to the cluster via the <code>~/.kube/config</code> file.</p>"},{"location":"library/cheatsheets/osgeo4w/","title":"OSGeo4W","text":"<p>This article is under heavy development and is not considered production ready</p> <p>OSGeo4W is an initiative from osgeo.org for packaging OpenSource Geospatial Systems, which are typically designed on and for Linux based systems, in an easy to use process that allows these systems (such as GRASS, QGIS, and others) to function well on the Windows Platform and manage each system and its dependencies in an easy to use way.</p>"},{"location":"library/cheatsheets/osgeo4w/#legacy-systems","title":"Legacy systems","text":"<p>Note that OSGeo4W used to be called <code>OSGeo4W</code> for the 32-bit installation and <code>OSGeo4W64</code> for the 64-bit installation. In 2021 a new OSGeo4W installer was created and support for legacy 32-bit systems was dropped. If you are using an older installation, it is highly recommended</p>"},{"location":"library/cheatsheets/osgeo4w/#cli","title":"CLI","text":"<p>OSGeo4W provides an isolated environment that keeps to the \"everything is a file\" philosophy of Linux systems. This means that all of the dependencies of the system are packaged within the OSGeo4W directory (typically \"C:\\OSGeo4W\"). This makes it easy to install and manage the system, however it also means that the windows environment doesn't know how to access these utilities all by itself.</p> <p>This means that using some commandline tools, like GDAL for example, will not be available by default.</p> <pre><code>PS C:\\Users\\Username&gt; Get-Command gdalinfo\nGet-Command: The term 'gdalinfo' is not recognized as a name of a cmdlet, function, script file, or executable program.\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.\nPS C:\\Users\\Username&gt; cmd /k \"where gdalinfo\"\nINFO: Could not find files for the given pattern(s).\n</code></pre> <p>To access the OSGeo4W environment, we simply need to \"call\" the OSGeo4W batch script which handles the environment for us.</p> <pre><code>PS C:\\Users\\Username&gt; cmd /k \"call C:/OSGeo4W/OSGeo4W.bat\"\nrun o-help for a list of available commands\nC:\\OSGeo4W&gt;where gdalinfo\nC:\\OSGeo4W\\bin\\gdalinfo.exe\nC:\\OSGeo4W&gt;o-help\n</code></pre> <p>When you start an OSGeo4W application, like QGIS Desktop for example, it will handle this environment configuration for you. If, however, you are performing other operations, such as using the qgis_processing framework or GRASS commandline tools, you will need to configure this environment yourself.</p>"},{"location":"library/cheatsheets/postgresql/","title":"PostgreSQL","text":"<p>This article is under heavy development and is not considered production ready</p> <p>PostgreSQL best SQL -- Everyone who knows what's up</p> <p>PostgreSQL also known as Postgres, is a free and open-source relational database management system (RDBMS). The name comes from its succession of its predecessor, Ingres. You are now a database nerd... there's no turning back.</p>"},{"location":"library/cheatsheets/postgresql/#sql","title":"SQL","text":"<p>Structured Query Language (SQL) is a query language used to interact with databases. It is a \"standard\" language structure, although its implementation differs between implementations. It does more than just query as well (see the Language Structures section below). Each discrete action in SQL is called a \"statement\", which does something like retrieving the results of a query or creating a new record, and multiple statements can be bundled together into a transaction.</p> <p>Fortunately the key words used in SQL tend to be written in (mostly) plain english, so it's relatively easy to understand and pick up. Multiple statements, joins, and subqueries can also be used which is where things start to get complicated, and optimizing those operations (and the database) can get rather complex.</p>"},{"location":"library/cheatsheets/postgresql/#simple-query-structures","title":"Simple Query Structures","text":""},{"location":"library/cheatsheets/postgresql/#common-queries","title":"Common queries","text":"<p>Basic query</p> <pre><code>SELECT col1, col2 FROM schema.table WHERE col2 = 'value' ORDER BY col1;\n</code></pre> <p>Aggregated query</p> <pre><code>SELECT max(col1), col2 FROM schema.table\nGROUP BY col2\nHAVING col2 = 'value';\nLIMIT n\nOFFSET offset;\n</code></pre> <p>Basic joins</p> <pre><code>SELECT col1, col2\nFROM table1\nFULL OUTER JOIN table2 ON col1\n</code></pre>"},{"location":"library/cheatsheets/postgresql/#clone-table","title":"Clone table","text":"<p>Duplicate table with data</p> <pre><code>CREATE TABLE new_table AS SELECT * FROM old_table;\n</code></pre> <p>Duplicate table structure</p> <pre><code>CREATE TABLE new_table AS\nTABLE existing_table\nWITH NO DATA;\n</code></pre> <p>Replicate table using subset</p> <pre><code>CREATE TABLE new_table AS\nSELECT\n*\nFROM\nexisting_table\nWHERE\ncondition;\n</code></pre>"},{"location":"library/cheatsheets/postgresql/#psql","title":"psql","text":"<p>Using the psql interactive terminal for postgresql. Note that the version of psql on the local system is likely required to be an equal or higher version than for any databases with which you intend on interacting.</p>"},{"location":"library/cheatsheets/postgresql/#installing-psql","title":"Installing psql","text":"<p>psql is installed alongside postgresql on many systems, however if it is not expected that the local machine will run a database server, psql can be installed using postgresql client libraries.</p> <p>Debian</p> <pre><code>sudo apt install postgresql-client\n</code></pre> <p>Mac</p> <pre><code>brew link --force libpq\n</code></pre> <p>$ psql --help</p> <pre><code>psql is the PostgreSQL interactive terminal.\n\nUsage:\n  psql [OPTION]... [DBNAME [USERNAME]]\n\nGeneral options:\n  -c, --command=COMMAND    run only single command (SQL or internal) and exit\n  -d, --dbname=DBNAME      database name to connect to (default: \"Username\")\n  -f, --file=FILENAME      execute commands from file, then exit\n  -l, --list               list available databases, then exit\n  -v, --set=, --variable=NAME=VALUE\n                            set psql variable NAME to VALUE\n                            (e.g., -v ON_ERROR_STOP=1)\n  -V, --version            output version information, then exit\n  -X, --no-psqlrc          do not read startup file (~/.psqlrc)\n  -1 (\"one\"), --single-transaction\n                            execute as a single transaction (if non-interactive)\n  -?, --help[=options]     show this help, then exit\n      --help=commands      list backslash commands, then exit\n      --help=variables     list special variables, then exit\n\nInput and output options:\n  -a, --echo-all           echo all input from script\n  -b, --echo-errors        echo failed commands\n  -e, --echo-queries       echo commands sent to server\n  -E, --echo-hidden        display queries that internal commands generate\n  -L, --log-file=FILENAME  send session log to file\n  -n, --no-readline        disable enhanced command line editing (readline)\n  -o, --output=FILENAME    send query results to file (or |pipe)\n  -q, --quiet              run quietly (no messages, only query output)\n  -s, --single-step        single-step mode (confirm each query)\n  -S, --single-line        single-line mode (end of line terminates SQL command)\n\nOutput format options:\n  -A, --no-align           unaligned table output mode\n      --csv                CSV (Comma-Separated Values) table output mode\n  -F, --field-separator=STRING\n                            field separator for unaligned output (default: \"|\")\n  -H, --html               HTML table output mode\n  -P, --pset=VAR[=ARG]     set printing option VAR to ARG (see \\pset command)\n  -R, --record-separator=STRING\n                            record separator for unaligned output (default: newline)\n  -t, --tuples-only        print rows only\n  -T, --table-attr=TEXT    set HTML table tag attributes (e.g., width, border)\n  -x, --expanded           turn on expanded table output\n  -z, --field-separator-zero\n                            set field separator for unaligned output to zero byte\n  -0, --record-separator-zero\n                            set record separator for unaligned output to zero byte\n\nConnection options:\n  -h, --host=HOSTNAME      database server host or socket directory (default: \"local socket\")\n  -p, --port=PORT          database server port (default: \"5432\")\n  -U, --username=USERNAME  database user name (default: \"Username\")\n  -w, --no-password        never prompt for password\n  -W, --password           force password prompt (should happen automatically)\n</code></pre>"},{"location":"library/cheatsheets/postgresql/#abstract-basic-psql-commands","title":"abstract \"Basic psql commands\"","text":"<p>Example psql connection:</p> <pre><code>psql -U username -d database_name -h localhost -p 5432;\n</code></pre> <p>Quit psql:</p> <pre><code>\\q;\n</code></pre> <p>List databases:</p> <pre><code>\\l;\n</code></pre> <p>Connect to database:</p> <pre><code>\\c database_name;\n</code></pre> <p>List schemas:</p> <pre><code>\\dn;\n</code></pre> <p>List tables:</p> <pre><code>\\dt;\n</code></pre> <p>List table info:</p> <pre><code>\\d+ table_name;\n</code></pre> <p>List functions:</p> <pre><code>\\df;\n</code></pre> <p>List views:</p> <pre><code>\\dv;\n</code></pre>"},{"location":"library/cheatsheets/postgresql/#cli","title":"cli","text":"<p>Additional command line tools for interacting with postgreql databases. Note that the version of cli tools on the local system is likely required to be an equal or higher version than for any databases with which you intend on interacting. CLI tools are typically installed along with postgresql. Please see the \"installing psql\" section above for instructions on how to install command line tools.</p>"},{"location":"library/cheatsheets/postgresql/#pg_dump","title":"pg_dump","text":"<p>$ pg_dump --help</p> <pre><code>pg_dump dumps a database as a text file or to other formats.\n\nUsage:\n  pg_dump [OPTION]... [DBNAME]\n\nGeneral options:\n  -f, --file=FILENAME          output file or directory name\n  -F, --format=c|d|t|p         output file format (custom, directory, tar,\n                                plain text (default))\n  -j, --jobs=NUM               use this many parallel jobs to dump\n  -v, --verbose                verbose mode\n  -V, --version                output version information, then exit\n  -Z, --compress=0-9           compression level for compressed formats\n  --lock-wait-timeout=TIMEOUT  fail after waiting TIMEOUT for a table lock\n  --no-sync                    do not wait for changes to be written safely to disk\n  -?, --help                   show this help, then exit\n\nOptions controlling the output content:\n  -a, --data-only              dump only the data, not the schema\n  -b, --blobs                  include large objects in dump\n  -B, --no-blobs               exclude large objects in dump\n  -c, --clean                  clean (drop) database objects before recreating\n  -C, --create                 include commands to create database in dump\n  -E, --encoding=ENCODING      dump the data in encoding ENCODING\n  -n, --schema=PATTERN         dump the specified schema(s) only\n  -N, --exclude-schema=PATTERN do NOT dump the specified schema(s)\n  -O, --no-owner               skip restoration of object ownership in\n                                plain-text format\n  -s, --schema-only            dump only the schema, no data\n  -S, --superuser=NAME         superuser user name to use in plain-text format\n  -t, --table=PATTERN          dump the specified table(s) only\n  -T, --exclude-table=PATTERN  do NOT dump the specified table(s)\n  -x, --no-privileges          do not dump privileges (grant/revoke)\n  --binary-upgrade             for use by upgrade utilities only\n  --column-inserts             dump data as INSERT commands with column names\n  --disable-dollar-quoting     disable dollar quoting, use SQL standard quoting\n  --disable-triggers           disable triggers during data-only restore\n  --enable-row-security        enable row security (dump only content user has\n                                access to)\n  --exclude-table-data=PATTERN do NOT dump data for the specified table(s)\n  --extra-float-digits=NUM     override default setting for extra_float_digits\n  --if-exists                  use IF EXISTS when dropping objects\n  --inserts                    dump data as INSERT commands, rather than COPY\n  --load-via-partition-root    load partitions via the root table\n  --no-comments                do not dump comments\n  --no-publications            do not dump publications\n  --no-security-labels         do not dump security label assignments\n  --no-subscriptions           do not dump subscriptions\n  --no-synchronized-snapshots  do not use synchronized snapshots in parallel jobs\n  --no-tablespaces             do not dump tablespace assignments\n  --no-unlogged-table-data     do not dump unlogged table data\n  --on-conflict-do-nothing     add ON CONFLICT DO NOTHING to INSERT commands\n  --quote-all-identifiers      quote all identifiers, even if not key words\n  --rows-per-insert=NROWS      number of rows per INSERT; implies --inserts\n  --section=SECTION            dump named section (pre-data, data, or post-data)\n  --serializable-deferrable    wait until the dump can run without anomalies\n  --snapshot=SNAPSHOT          use given snapshot for the dump\n  --strict-names               require table and/or schema include patterns to\n                                match at least one entity each\n  --use-set-session-authorization\n                                use SET SESSION AUTHORIZATION commands instead of\n                                ALTER OWNER commands to set ownership\n\nConnection options:\n  -d, --dbname=DBNAME      database to dump\n  -h, --host=HOSTNAME      database server host or socket directory\n  -p, --port=PORT          database server port number\n  -U, --username=NAME      connect as specified database user\n  -w, --no-password        never prompt for password\n  -W, --password           force password prompt (should happen automatically)\n  --role=ROLENAME          do SET ROLE before dump\n\nIf no database name is supplied, then the PGDATABASE environment\nvariable value is used.\n\nReport bugs to &lt;pgsql-bugs@lists.postgresql.org&gt;.\n</code></pre>"},{"location":"library/cheatsheets/postgresql/#backup-with-pg_dump","title":"Backup with pg_dump","text":"<p>pg_dump is a command line tool for backing up postgresql databases.</p> <p>Simple example in bash:</p> <pre><code>pg_dump -U admin_user -x -n public -h localhost -p 5111 -d gis &gt; data.sql\n</code></pre> <p>Complex example in Windows:</p> <pre><code>\"C:\\Program Files\\PostgreSQL\\14\\bin\\pg_dump.exe\" --file \"C:\\\\backup\\\\data.sql\" --host \"127.0.0.1\" --port \"5234\" --username \"admin_user\" --no-password --verbose --format=p --no-owner --no-privileges --no-tablespaces --no-unlogged-table-data --encoding \"UTF8\" --schema \"public\" \"database_name\"\n</code></pre>"},{"location":"library/cheatsheets/postgresql/#postgis","title":"PostGIS","text":"<p>PostGIS is a spatial extension for PostgreSQL that provides spatial functions and datatypes.</p> <p>Be sure to check out the reference documentation at https://postgis.net/.</p>"},{"location":"library/cheatsheets/postgresql/#srids","title":"SRIDs","text":"<p>Spatial Reference Identifiers and Coordinate Reference System (CRS) management with PostGIS.</p> <p>Create Custom CRS Definitions</p> <p>Example using custom Albers EE Conic (Southern Africa)</p> <pre><code>INSERT INTO spatial_ref_sys (srid,proj4text) VALUES (40030,\n'+proj=aea +lat_0=0 +lon_0=25 +lat_1=-24 +lat_2=-33 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs');\n</code></pre> <p>Use UpdateGeometrySRID to update geometry SRIDs.</p> <pre><code>select UpdateGeometrySRID('table_name', 'geom', 4326);\n</code></pre>"},{"location":"library/cheatsheets/postgresql/#language-structures","title":"Language Structures","text":"<p>There are multiple \"categories\" in SQL which apply different functionalities to different entities within the database. These are Data Definition Language (DDL), Data Query Language (DQL), Data Manipulation Language (DML), Transaction Control Language (TCL), and Data Control Language (DCL).</p> <p>Very basically, the nomenclature (and therefore the command used) may change between entities, and this makes it clear to the user and the database which entity or object the function should apply to. For example, you might use the DELETE command to delete a record from the database, but you would use the DROP command to delete a table, because tables and records are seen as different entities within the database. You can also do a ROLLBACK in a transaction, but you can't do so with a record INSERT command directly.</p> <p>These definitions are, of course, not arbitrarily assigned, and databases are a mature and complex field of computer science, which is where these formal structures and definitions come into effect.</p> <p>Read more on the topic at geeksforgeeks.org.</p>"},{"location":"library/links/","title":"Links","text":"<p>Links to interesting external resources</p>"},{"location":"library/media/","title":"Kartoza Media Center","text":"<p>Welcome to the Kartoza Media Center.</p> <p>Here you can find links to media releases, social media feeds, and notices from Kartoza (Pty) Ltd</p> <ul> <li>Kartoza.com</li> <li>GitHub</li> <li>Twitter</li> <li>DockerHub</li> <li>Newsletters</li> </ul>"},{"location":"library/media/newsletters/","title":"Resources","text":"<ul> <li>2021 Newsletter</li> </ul>"},{"location":"library/tutorials/","title":"Tutorials","text":"<p>Tutorials.</p> <ul> <li>General: General tutorials</li> <li>QGIS: Tutorials related to QGIS</li> <li>Links: Links to third party and external tutorials and learning resources</li> </ul>"},{"location":"library/tutorials/general/","title":"General Tutorials","text":"<p>General Tutorials.</p>"},{"location":"library/tutorials/general/#remote-meeting-software","title":"Remote Meeting Software","text":"<ul> <li>Using Zoom: Basics on using Zoom Remote Meeting Software</li> <li>Using Google Meet: Basics on using Google Meet Remote Meeting Software</li> <li>Using Jitsi: Basics on using Jitsi Remote Meeting Software</li> </ul>"},{"location":"library/tutorials/general/#documentation","title":"Documentation","text":"<ul> <li>MkDocs PDF: Generating PDF Documentation from this site</li> </ul>"},{"location":"library/tutorials/general/#tools","title":"Tools","text":"<ul> <li>Git Primer: A light-but-functional introduction to the Git Version Control System</li> </ul>"},{"location":"library/tutorials/general/#procedures","title":"Procedures","text":"<ul> <li>Deployments with Docker-Ansible: How to set up, configure, and deploy to a new host with docker-ansible.</li> </ul>"},{"location":"library/tutorials/general/docker-ansible-deployments/","title":"Docker Ansible","text":"<p>Docker-Ansible is a project for running an ansible controller in a docker container. This allows the controller to be used on windows and avoids issues with environment specific configuration or possible collisions, making it possible to use ansible playbooks for consistent and reliable deployments on VPS and BareMetal instances.</p> <p>The Kartoza Playbooks is used for company maintained playbooks.</p>"},{"location":"library/tutorials/general/docker-ansible-deployments/#prerequisites","title":"Prerequisites","text":"<p>Ensure beforehand that you have ssh access to the relevant host, and replace the relevant server details in the host config etc. as outlined in the following commans. By default, Docker-Ansible will attempt to use the ssh configuration files from the host to perform operations.</p>"},{"location":"library/tutorials/general/docker-ansible-deployments/#procedure","title":"Procedure","text":"<p>The following example shows bash commands on how to create a new docker-based host. Ensure beforehand that you have ssh access to the host and replace the relevant server details in the host config etc.</p> <pre><code>git clone https://github.com/kartoza/docker-ansible.git\ncd docker-ansible/ansible\nrm -r playbooks\ngit clone https://github.com/kartoza/playbooks.git\necho 123.456.78.90 ansible_user=root ansible_private_key_file=/root/.ssh/id_ed25519 &gt; inventory/hosts.ini\ncd ..\ndocker build . -t ansible\ndocker run -dt -v $PWD/ansible:/ansible \\\n-v ~/.ssh:/root/.ssh:ro \\\n-e ANSIBLE_CONFIG=/ansible/ansible.cfg \\\n--restart=unless-stopped \\\n--name ansible ansible\ndocker exec -it ansible ansible-playbook /ansible/playbooks/ubuntu20.04/app/docker-ce.yaml -u iamgroot -k\n</code></pre>"},{"location":"library/tutorials/general/docker-ansible-deployments/#cleanup","title":"Cleanup","text":"<p>Once the task has run to completion you can always output the logs from the docker container to a file, e.g. <code>docker logs ansible &gt; ansible-output.log</code></p> <p>Remove the container <code>docker stop ansible &amp;&amp; docker rm ansible</code></p> <p>If desired, remove the docker-ansible directory. To purge the docker image use <code>docker image rm ansible</code>.</p>"},{"location":"library/tutorials/general/docker-ansible-deployments/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter permissions or ssh access errors, try setting <code>-v ~/.ssh:/root/.ssh:ro</code> to <code>-v ~/.ssh:/root/win-ssh:ro</code></p> <p>If ansible struggles to gather facts or stumbles into connection issues, using the ping command will allow you to verify whether the issue is connectivity related (e.g. ssh keys etc) or system specific.</p> <p>Simply ping your host to check the response <code>docker exec -it ansible ansible -m ping 123.456.78.90</code>.</p> <p>Otherwise you can always attach to the ansible controller shell with <code>docker exec -it ansible /bin/bash</code> and then troubleshoot from there, e.g. try ssh <code>ssh 123.456.78.90</code>, or check file permissions with <code>ls -alh /root/.ssh/</code></p>"},{"location":"library/tutorials/general/git-primer/","title":"Git Primer","text":"<p>This tutorial will show you how to use Git to safely implement new features or changes into a project, without any risk of adversely affecting the primary code base, or main branch. We will cover some concepts about git and version control systems to allow suers to get up to speed quickly and start contributing straight away.</p>"},{"location":"library/tutorials/general/git-primer/#basic-branching-in-git","title":"Basic branching in Git","text":"<p>A key function of Git is to function as a \"distributed version control system\", which means that it can be used to track changes in a project across multiple developers. Centralised version control systems typically require an individual to \"check out\" and \"lock\" a resource while it is under development, and then \"check in\" the changes when the resource is ready to be released. By contrast, distributed version control allows multiple  to \"fork\" an existing set of resources, and then track backwards through the commit history to see what changes have been made to the resource. A key element of git is \"forking\" and manipulation of \"branches\".</p> <p>Note that this tutorial assumes that users already have a git project setup and ready to use. If you need assistance getting setup, review other resources for Getting started with Git and GitHub, setting up projects on GitLab, migrating existing projects, or simply run <code>git init</code> in a project directory to get going quickly.</p>"},{"location":"library/tutorials/general/git-primer/#monitoring-change-in-git","title":"Monitoring Change in Git","text":"<p>Git is a version control system, but its mechanism of operation relies on the process of tracking changes. You could even think of Git primarily as a change monitoring tool, which has a whole host of additional features which make use of the metadata collected during the monitoring operation to provide sophisticated distributed version control.</p> <p>With every new commit, or collection of changes, git collects the differences between the previous commit and the current one, along with some additional metadata. Each commit has a signature, or hash, uniquely identifying it. Later on, this signature can be used to reference the commit and even check for differences between specified commits.</p>"},{"location":"library/tutorials/general/git-primer/#committing-code","title":"Committing Code","text":"<p>As highlighted above, Git is a change monitoring tool, but it also needs to be told what files to track the changes on.</p> <p>By default, git won't track changes to any files. Using <code>git add filename</code> will add the file to the \"staging\" area, and <code>git commit -m \"message\"</code> will commit the collection of staged changes to the currently active branch in the repository.</p> <p>In cases where more than one file needs to be added, using a space separated list of files, such as <code>git add file1.ext file2.ext</code> will add all listed files to the staging area.</p> <p>To add all files (not matched by .gitignore) to the staging area at once, simply use <code>git add -A</code>.</p>"},{"location":"library/tutorials/general/git-primer/#git-branches","title":"Git Branches","text":"<p>Commits track these changes in sequence to each other. This is what enables git as such a powerful method of distributed version control, and can also be effectively leveraged to provide a method of branching, whereby certain changes are developed in isolation to the rest of the project.</p> <p>Git uses branches by default, although new projects are simply created with a single default, or main, branch.</p> <p></p> <p>A chain of commits in a single branch Repository</p>"},{"location":"library/tutorials/general/git-primer/#creating-branches","title":"Creating Branches","text":"<p>Creating a new branch can be done with the command <code>git checkout -b branch-name</code>. The <code>-b</code>, or branch, flag indicates that git should create a new branch with the specified name. The base commit of the branch will simply reference the currently active HEAD commit. Future commits to the main branch will no longer affect the new branch.</p> <p></p> <p>A new git branch is simply creating a \"forked\" chain, using a specific commit record as the base</p> <p></p> <p>Performing a git commit with a new branch checked out creates a distinct history from parallel branches</p> <p>This should clearly illustrate how branches keep changes isolated between them, allowing changes to be made to the code without affecting the other branches.</p>"},{"location":"library/tutorials/general/git-primer/#viewing-branches","title":"Viewing Branches","text":"<p>Checking the available branches in a repository is as simple as <code>git branch</code>, which will print out a list of available branches and indicate the active branch with an asterisk.</p> <p></p> <p>GitHub provides a drop-down menu with the available branches</p> <p></p> <p>Branches and resources within branches can also be accessed via URL</p>"},{"location":"library/tutorials/general/git-primer/#changing-branches","title":"Changing Branches","text":"<p>Commits and other git commands are typically going to be executed on the active branch.</p> <p>To switch between branches, simply use <code>git checkout branch-name</code>.</p> <p>In some cases, you may have uncommitted changes which may get lost when switching between branches. To prevent data loss in these instances, git includes the stash feature.</p>"},{"location":"library/tutorials/general/git-primer/#and-then-some","title":"And then some","text":"<p>Git is incredibly powerful (and as a result, rather complex). A common use case, however, might be the merging of changes from a branch back into the main branch of the project. The <code>git merge</code> command is designed for exactly this, and it's typical usage follows a simple workflow.</p> <p>Simply switch the active branch to the branch it is desired that the changes are merged into, e.g. <code>git checkout main</code></p> <p>Then use <code>git merge branch-name</code> to merge the changes from branch-name into the main branch.</p> <p>Git supports multiple branches, and creating branches from other branches, so it's perfectly feasible that some long lived branches might be kept around for certain purposes, whilst others are merged into other branches, and then discarded.</p> <p></p> <p>A Git repository might include feature branches kept in isolation, or it may merge changes from a branch back into the main branch</p> <p>The \"HEAD\" reference in git is simply pointing to a specific commit, which will often be designated to the currently active branch.</p> <p>There's all sorts of advanced functionality available for managing the repository, such as remote repository management, cherry picking, and history modifications... but very often users simply need a way to manage simple changes in an isolated manner, and branches are a great way to do that.</p> <p>For the more advanced functionalities, additional tools can help simplify the management and deployment of Git repositories.</p>"},{"location":"library/tutorials/general/git-primer/#conflict-resolution-rebase-history-squashing-and-stashing","title":"Conflict resolution, Rebase, History, Squashing, and Stashing","text":"<p>These are terms for all that \"advanced functionality\" that was just mentioned.</p> <p>When merging changes from one branch into another, or switching between branches with committed and uncommitted changes, there are a number of scenarios which can occur. This introduces a plethora of git functionalities (and jargon) which give git it's superpowered reputation and a fair number of jokes about it's complexity.</p> <p>For the most part, however, the concepts are actually simple... it's the execution that can be complicated. Over the years, many tools and platforms have produced more efficient ways to handle these scenarios in efficient and reliable ways, so they're less of a pain point, but we'll cover them here at a high level so that when they are encountered, you'll know what to do with them \ud83d\ude09.</p> <p>If multiple individuals make changes to the same file, in the same place, a conflict can occur - that means that git cannot automatically resolve what the correct code is that should be injected into the resource, and manual conflict resolution must be done where a developer tells git which lines to keep, which to remove, and which to add to a new commit to patch things up to standard again.</p> <p>Sometimes a new set of features should be \"rebased\" - that is switching the \"base commit\" that it was forked from (often to the most recent main commit), and the developer can resolve any minor conflicts before asking for a code review from upstream developers etc. It's also capable of doing this in an interactive way, allowing developers to pick which commmits to keep when you have a git history full of noise, mistakes or other issues. There are also a great many ways to rewrite, or even migrate, git history... Remember that git tracks changes, which can, in fact, lead to bloat.</p> <p>Another way to clean up the history is to \"squash\" commits - so noisy or erroneous changes can be excluded from the history. This often makes things easier for reviewers to understand and cleans up bloat.</p> <p>Finally, git has a feature called \"stashing\" which allows developers to temporarily store changes in a \"stash\" before committing them to git. This is useful when a developer is working on changes that are not ready for committing, and needs to be able to revert to a previous state, change branches, or pull new commits from the upstream repository into their current branch. Essentially the \"stash\" is a kind of temporary or background commit that does not form a part of the git history, and allows users to avoid conflicts and prevent data loss.</p>"},{"location":"library/tutorials/general/git-primer/#releasing-changes","title":"Releasing Changes","text":"<p>Once you have your changes committed to your branch, you can create a \"featured checkpoint\" in your project using a git tag with the <code>-a</code> flag to add an annotation.</p> <pre><code>git tag -a v0.1-my-changes -m \"my changes for v0.1\"\n</code></pre> <p>On existing projects, you may want to review the available tags for a project using <code>git tag -l</code> before you decide on a tagging convention.</p> <p>Of course tags will only make the source code available to other developers, but a more sophisticated method of distributing your changes would be to create a release which might include compiled assets.</p> <p>If you're eager to get started with Git, be sure to check out what others are building, or contribute to ongoing open source initiatives.</p>"},{"location":"library/tutorials/general/git-primer/#prs-mrs-issues-releases-packages-cicd-and-gitoptions-galore","title":"PRs, MRs, Issues, Releases, Packages, CI/CD, and GitOp(tion)s Galore","text":"<p>Git itself is a version control utility... and a really great one at that. What it doesn't do are things like project management, issue tracking, bug reports, file distribution and more. There are, however, a lot of platforms that fill this gap and offer a great suite of tools for managing and deploying Git repositories alongside these other features, like GitHub, GitLab, BitBucket, or even self hosted systems like Gitea.</p> <p>The key elements are the \"Pull Requests\" and \"Merge Requests\". These are essentially the same thing conceptually - You are flagging to the \"upstream\" repository managers that you originally forked from that you have changes which you believe would be beneficial to integrate into another branch of the repository. Platforms like GitHub say \"Pull Request\", because the first action you would perform would be to get your changes pulled into the upstream repository. Platforms like GitLab say \"Merge Request\", because the last action you would perform would be to merge these changes into the upstream branch (typically the default branch of main or develop, but various workflows exist for feature branches and more).</p>"},{"location":"library/tutorials/general/git-primer/#tldr","title":"TL;DR","text":"<p>Git commandline seem a bit confusing for you? Good news is once you understand what it's doing under the hood, how you get it done should be less of an issue. I definitely recommend the super-duper-next-level-ultra-awesome GitLens for VSCode.</p>"},{"location":"library/tutorials/general/git-primer/#conclusion","title":"Conclusion","text":"<p>What? You made it to the end? I don't believe you I think you cheated and skipped the rest of the content. But if you really did make it all the way here from start to finish I am very proud. You deserve a present. Here, have a carrot... \ud83e\udd55</p>"},{"location":"library/tutorials/general/google-meet/","title":"Content","text":""},{"location":"library/tutorials/general/jitsi/","title":"Content","text":""},{"location":"library/tutorials/general/mkdocs-pdf/","title":"MkDocs PDF","text":"<p>Serving a local clone of this documentation with docker is as simple as <code>docker run --rm -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material</code>.</p> <p>This process walks through attempting to setup an environment with Docker that will produce PDF documentation for a MkDocs site with A MkDocs-Material Theme (Like this one).</p>"},{"location":"library/tutorials/general/mkdocs-pdf/#docker-environment","title":"Docker environment","text":"<p>Create a dockerfile with the relevant dependencies in line with the mkdocs-material docs and the mkdocs-pdf-export-plugin.</p> <pre><code>FROM squidfunk/mkdocs-material:8.2.15\n\n# RUN pip install mkdocs-pdf-export-plugin\n\n# Thanks to:\n# https://stackoverflow.com/questions/71372066/docker-fails-to-install-cffi-with-python3-9-alpine-in-dockerfile\n# https://github.com/Kozea/WeasyPrint/issues/699\n\nRUN apk add --update --no-cache --virtual .tmp-build-deps \\\n    gcc libc-dev linux-headers \\\n    &amp;&amp; apk add musl-dev jpeg-dev zlib-dev libffi-dev cairo-dev pango-dev gdk-pixbuf\n\nRUN python -m pip install --upgrade pip &amp;&amp; \\\n    python -m pip install mkdocs-pdf-export-plugin\n\n# Set working directory\nWORKDIR /docs\n\n# Expose MkDocs development server port\nEXPOSE 8000\n\n# Start development server by default\nENTRYPOINT [\"mkdocs\"]\nCMD [\"serve\", \"--dev-addr=0.0.0.0:8000\"]\n</code></pre> <p>Now create the custom mkdocs-material docker image with the command <code>docker build -t my-mkdocs .</code>.</p>"},{"location":"library/tutorials/general/mkdocs-pdf/#export-single-pdf","title":"Export Single PDF","text":"<p>To build the updated documentation and produce the output pdf, edit the <code>mkdocs.yml</code> file to include the plugin with the \"combined\" option set to true:</p> <pre><code>plugins:\n  - search\n  - pdf-export:\n      verbose: true\n      media_type: print\n      combined: true\n      combined_output_path: pdf/TheKartozaHandbook.pdf\n</code></pre> <p>Then use the following command to build the docs</p> <pre><code>docker run --rm -it -v ${PWD}:/docs my-mkdocs build\n</code></pre>"},{"location":"library/tutorials/general/mkdocs-pdf/#pdf-export-plugin","title":"PDF Export Plugin","text":"<p>The PDF export plugin can also be used to add a \"download pdf\" for each page. To try this out, edit the <code>mkdocs.yml</code> file to include the plugin:</p> <pre><code>plugins:\n  - search\n  - pdf-export\n</code></pre> <p>Now you can run the documentation with the command:</p> <pre><code>docker run --rm -p 8000:8000 -v ${PWD}:/docs my-mkdocs\n</code></pre> <p>Note that setting the \"combined\" option to true when service the documentation with the plugin will automatically point all download links to the collated file and individual page exports will not be available.</p> <p>This docker file takes rather a long time to start up...</p> <p>The docker logs will hang while the documentation is built. This is much slower with the PDF export plugin and using the default mkdocs-material image and configuration will be much faster for simple site builds. The expected docker logs output might be as follows:</p> <pre><code>warnings.warn(\nINFO     -  Cleaning site directory\nINFO     -  The following pages exist in the docs directory, but are not included in the \"nav\" configuration:\n  - development/conventions/dev_processes.md\n  - development/conventions/git.md\n  - development/conventions/ides.md\n  - development/conventions/project_processes.md\n  - development/environments/links.md\n  - development/environments/vscode/extension_install.md\n  - development/environments/vscode/links.md\n  - development/technologies/frameworks.md\n  - development/technologies/languages.md\n  - devops/infrastructure/personal_infrastructure.md\n  - devops/infrastructure/rancher-k3s-single-node.md\n  - devops/security/links.md\n  - library/cheatsheets/bash.md\n  - library/cheatsheets/postgresql.md\n  - library/media/newsletters.md\n  - library/tutorials/general/index.md\n  - library/tutorials/general/google-meet.md\n  - library/tutorials/general/jitsi.md\n  - library/tutorials/general/zoom.md\n  - library/tutorials/links/index.md\n  - library/tutorials/qgis/index.md\n</code></pre> <p>After a long wait period, the docker log should let you know the system is running and you can access the site on your local machine from the URL http://127.0.0.1:8000</p> <pre><code>INFO     -  Documentation built in 224.82 seconds\nINFO     -  [11:40:10] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO     -  [11:40:10] Serving on http://0.0.0.0:8000/\n</code></pre> <p>Once it's built it should include a pdf export button at the top of each page.</p>"},{"location":"library/tutorials/general/mkdocs-pdf/#todo","title":"TODO","text":"<ul> <li>Add theming/ customization</li> <li>Incorporate into GitHub Pages site and actions</li> <li>Add static collated pdf version (and download link) to published docs</li> </ul>"},{"location":"library/tutorials/general/zoom/","title":"Content","text":""},{"location":"library/tutorials/links/","title":"Tutorial Links","text":"<p>Links to third party and external tutorials and learning resources</p>"},{"location":"library/tutorials/qgis/","title":"QGIS Tutorials","text":"<p>QGIS Tutorials</p>"}]}